
TaskScheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001afc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e08  08001e08  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08001e08  08001e08  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e08  08001e08  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e08  08001e08  00011e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e0c  08001e0c  00011e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08001e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000000b0  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000148  20000148  00020098  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014c6  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000733  00000000  00000000  00021588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000240  00000000  00000000  00021cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d8  00000000  00000000  00021f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003148  00000000  00000000  000220d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000026e9  00000000  00000000  00025220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009d41  00000000  00000000  00027909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003164a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f40  00000000  00000000  0003169c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001c94 	.word	0x08001c94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	08001c94 	.word	0x08001c94

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <PendSV_Handler>:
  */
__attribute__((naked)) void PendSV_Handler(void)
{
	/* Save the context of current running task */

	__asm volatile("MRS R0,PSP"); /* Get current running task's PSP value */
 8000290:	f3ef 8009 	mrs	r0, PSP

	__asm volatile("STMDB R0!,{R4-R11}"); /* Using that PSP value store SF2 (registers R4-R11) */
 8000294:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}"); /* Save LR (EXC_RETURN) on the scheduler main stack */
 8000298:	b500      	push	{lr}

	__asm volatile("BL Save_PSP_Value"); /* Save the PSP value in the current task's TCB. The PSP value
 800029a:	f000 fa61 	bl	8000760 <Save_PSP_Value>
                                            is in R0 and passed as the first argument to the called function */

	/* Retrieve the context of the next task */

	__asm volatile("BL Schedule"); /* Decide the next task to run */
 800029e:	f000 f921 	bl	80004e4 <Schedule>

	__asm volatile ("BL Get_PSP_Value"); /* Get the new task's PSP value */
 80002a2:	f000 fa51 	bl	8000748 <Get_PSP_Value>

	__asm volatile ("LDMIA R0!,{R4-R11}"); /* Using that PSP value retrieve SF2 (registers R4-R11) */
 80002a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("MSR PSP,R0"); /* Update PSP */
 80002aa:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}"); /* Retrieve LR (EXC_RETURN) from the scheduler main stack*/
 80002ae:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR"); /* Exception return using the EXC_RETURN in LR*/
 80002b2:	4770      	bx	lr
}
 80002b4:	bf00      	nop

080002b6 <SysTick_Handler>:
  * 		initiates a contect-switch.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80002b6:	b580      	push	{r7, lr}
 80002b8:	af00      	add	r7, sp, #0
	/* Increment the program's global tick count */
	Increment_Global_Tick_Count();
 80002ba:	f000 fab3 	bl	8000824 <Increment_Global_Tick_Count>

	/* Unblock qualified tasks */
	Unblock_Tasks();
 80002be:	f000 fabf 	bl	8000840 <Unblock_Tasks>

	/* Pend the PendSV exception and initiate a contect-switch */
	Pend_PendSV();
 80002c2:	f000 fa6b 	bl	800079c <Pend_PendSV>
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <HardFault_Handler>:
  * @brief  Handler for the HardFault system exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	printf("Exception : HardFault\n");
 80002d0:	4801      	ldr	r0, [pc, #4]	; (80002d8 <HardFault_Handler+0xc>)
 80002d2:	f000 fd69 	bl	8000da8 <puts>
	while(1);
 80002d6:	e7fe      	b.n	80002d6 <HardFault_Handler+0xa>
 80002d8:	08001cac 	.word	0x08001cac

080002dc <MemManage_Handler>:
  * @brief  Handler for the MemManage system exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80002e0:	4801      	ldr	r0, [pc, #4]	; (80002e8 <MemManage_Handler+0xc>)
 80002e2:	f000 fd61 	bl	8000da8 <puts>
	while(1);
 80002e6:	e7fe      	b.n	80002e6 <MemManage_Handler+0xa>
 80002e8:	08001cc4 	.word	0x08001cc4

080002ec <BusFault_Handler>:
  * @brief  Handler for the BusFault system exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80002f0:	4801      	ldr	r0, [pc, #4]	; (80002f8 <BusFault_Handler+0xc>)
 80002f2:	f000 fd59 	bl	8000da8 <puts>
	while(1);
 80002f6:	e7fe      	b.n	80002f6 <BusFault_Handler+0xa>
 80002f8:	08001cdc 	.word	0x08001cdc

080002fc <UsageFault_Handler>:
  * @brief  Handler for the UsageFault system exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	printf("Exception : UsageFault\n");
 8000300:	4801      	ldr	r0, [pc, #4]	; (8000308 <UsageFault_Handler+0xc>)
 8000302:	f000 fd51 	bl	8000da8 <puts>
	while(1);
 8000306:	e7fe      	b.n	8000306 <UsageFault_Handler+0xa>
 8000308:	08001cf4 	.word	0x08001cf4

0800030c <Led_Init>:
  * @note   The 4 LEDs are connected to port D as pins 12,13,14,15.
  * @param  None
  * @retval None
  */
void Led_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
	/* Define pointers */
	uint32_t *pRccAhb1enr = (uint32_t*)RCC_AHB1ENR; /* pointer to RCC AHB1 peripheral clock enable register */
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <Led_Init+0x6c>)
 8000314:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)GPIOD_MODER; /* pointer to GPIOD port mode register */
 8000316:	4b19      	ldr	r3, [pc, #100]	; (800037c <Led_Init+0x70>)
 8000318:	603b      	str	r3, [r7, #0]

	/* Enable  the peripheral clock of GPIOD */
	*pRccAhb1enr |= ( 1 << 3);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f043 0208 	orr.w	r2, r3, #8
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]

	/* Configure general purpose output mode for pins 12,13,14,15 of port D */
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));  /* pGpiodModeReg[25:24] = 01 */
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE)); /* pGpiodModeReg[27:26] = 01 */
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));    /* pGpiodModeReg[29:28] = 01 */
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));   /* pGpiodModeReg[31:30] = 01 */
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	601a      	str	r2, [r3, #0]

	/* Turn off all LEDs */
	Led_Off(LED_GREEN);
 8000356:	200c      	movs	r0, #12
 8000358:	f000 f82a 	bl	80003b0 <Led_Off>
	Led_Off(LED_ORANGE);
 800035c:	200d      	movs	r0, #13
 800035e:	f000 f827 	bl	80003b0 <Led_Off>
	Led_Off(LED_RED);
 8000362:	200e      	movs	r0, #14
 8000364:	f000 f824 	bl	80003b0 <Led_Off>
	Led_Off(LED_BLUE);
 8000368:	200f      	movs	r0, #15
 800036a:	f000 f821 	bl	80003b0 <Led_Off>
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40023830 	.word	0x40023830
 800037c:	40020c00 	.word	0x40020c00

08000380 <Led_On>:
  * @brief  Turn on a LED.
  * @param  LedNumber - Specifies the pin to which the led is connected to.
  * @retval None
  */
void Led_On(uint8_t LedNumber)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpiodDataReg = (uint32_t*)GPIOD_ODR;
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <Led_On+0x2c>)
 800038c:	60fb      	str	r3, [r7, #12]
	*pGpiodDataReg |= (1 << LedNumber); /* pGpiodDataReg[LedNumber] = 1 */
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	79fa      	ldrb	r2, [r7, #7]
 8000394:	2101      	movs	r1, #1
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	431a      	orrs	r2, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40020c14 	.word	0x40020c14

080003b0 <Led_Off>:
  * @brief  Turn off a LED.
  * @param  LedNumber - Specifies the pin to which the led is connected to.
  * @retval None
  */
void Led_Off(uint8_t LedNumber)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
	uint32_t *pGpiodDataReg = (uint32_t*)GPIOD_ODR;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <Led_Off+0x2c>)
 80003bc:	60fb      	str	r3, [r7, #12]
	*pGpiodDataReg &= ~(1 << LedNumber); /* pGpiodDataReg[LedNumber] = 0 */
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	79fa      	ldrb	r2, [r7, #7]
 80003c4:	2101      	movs	r1, #1
 80003c6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	401a      	ands	r2, r3
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
}
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40020c14 	.word	0x40020c14

080003e0 <main>:
  * @brief  Program entry point.
  * @param  None
  * @retval indicates how the program exited.
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	/* Enable system exceptions */
	System_Exceptions_Enable();
 80003e4:	f000 f992 	bl	800070c <System_Exceptions_Enable>

	/* Initialize MSP to the start of the scheduler's stack */
	Scheduler_Stack_Init(SCHEDULER_STACK_START);
 80003e8:	482b      	ldr	r0, [pc, #172]	; (8000498 <main+0xb8>)
 80003ea:	f000 f941 	bl	8000670 <Scheduler_Stack_Init>

	/* Initialize tasks' control block properties and push dummy contents to their stack */
	Task_Init(pTask1, TASK1, (uint32_t*)T1_STACK_START, Task1_Handler);
 80003ee:	4b2b      	ldr	r3, [pc, #172]	; (800049c <main+0xbc>)
 80003f0:	6818      	ldr	r0, [r3, #0]
 80003f2:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <main+0xc0>)
 80003f4:	4a2b      	ldr	r2, [pc, #172]	; (80004a4 <main+0xc4>)
 80003f6:	2101      	movs	r1, #1
 80003f8:	f000 f93f 	bl	800067a <Task_Init>
	Task_Init(pTask2, TASK2, (uint32_t*)T2_STACK_START, Task2_Handler);
 80003fc:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <main+0xc8>)
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	4b2a      	ldr	r3, [pc, #168]	; (80004ac <main+0xcc>)
 8000402:	4a2b      	ldr	r2, [pc, #172]	; (80004b0 <main+0xd0>)
 8000404:	2102      	movs	r1, #2
 8000406:	f000 f938 	bl	800067a <Task_Init>
	Task_Init(pTask3, TASK3, (uint32_t*)T3_STACK_START, Task3_Handler);
 800040a:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <main+0xd4>)
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <main+0xd8>)
 8000410:	4a2a      	ldr	r2, [pc, #168]	; (80004bc <main+0xdc>)
 8000412:	2103      	movs	r1, #3
 8000414:	f000 f931 	bl	800067a <Task_Init>
	Task_Init(pTask4, TASK4, (uint32_t*)T4_STACK_START, Task4_Handler);
 8000418:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <main+0xe0>)
 800041a:	6818      	ldr	r0, [r3, #0]
 800041c:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <main+0xe4>)
 800041e:	4a2a      	ldr	r2, [pc, #168]	; (80004c8 <main+0xe8>)
 8000420:	2104      	movs	r1, #4
 8000422:	f000 f92a 	bl	800067a <Task_Init>
	Task_Init(pIdleTask, IDLE_TASK, (uint32_t*)IDLE_STACK_START, IdleTask_Handler);
 8000426:	4b29      	ldr	r3, [pc, #164]	; (80004cc <main+0xec>)
 8000428:	6818      	ldr	r0, [r3, #0]
 800042a:	4b29      	ldr	r3, [pc, #164]	; (80004d0 <main+0xf0>)
 800042c:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <main+0xf4>)
 800042e:	2100      	movs	r1, #0
 8000430:	f000 f923 	bl	800067a <Task_Init>

	/* Enqueue tasks to the ready queue */
	gReadyQueue.ENQUEUE(&(gReadyQueue.head), pTask1, REGULAR_ENQUEUE);
 8000434:	4b28      	ldr	r3, [pc, #160]	; (80004d8 <main+0xf8>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	4a18      	ldr	r2, [pc, #96]	; (800049c <main+0xbc>)
 800043a:	6811      	ldr	r1, [r2, #0]
 800043c:	2200      	movs	r2, #0
 800043e:	4827      	ldr	r0, [pc, #156]	; (80004dc <main+0xfc>)
 8000440:	4798      	blx	r3
	gReadyQueue.ENQUEUE(&(gReadyQueue.head), pTask2, REGULAR_ENQUEUE);
 8000442:	4b25      	ldr	r3, [pc, #148]	; (80004d8 <main+0xf8>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	4a18      	ldr	r2, [pc, #96]	; (80004a8 <main+0xc8>)
 8000448:	6811      	ldr	r1, [r2, #0]
 800044a:	2200      	movs	r2, #0
 800044c:	4823      	ldr	r0, [pc, #140]	; (80004dc <main+0xfc>)
 800044e:	4798      	blx	r3
	gReadyQueue.ENQUEUE(&(gReadyQueue.head), pTask3, REGULAR_ENQUEUE);
 8000450:	4b21      	ldr	r3, [pc, #132]	; (80004d8 <main+0xf8>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <main+0xd4>)
 8000456:	6811      	ldr	r1, [r2, #0]
 8000458:	2200      	movs	r2, #0
 800045a:	4820      	ldr	r0, [pc, #128]	; (80004dc <main+0xfc>)
 800045c:	4798      	blx	r3
	gReadyQueue.ENQUEUE(&(gReadyQueue.head), pTask4, REGULAR_ENQUEUE);
 800045e:	4b1e      	ldr	r3, [pc, #120]	; (80004d8 <main+0xf8>)
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	4a17      	ldr	r2, [pc, #92]	; (80004c0 <main+0xe0>)
 8000464:	6811      	ldr	r1, [r2, #0]
 8000466:	2200      	movs	r2, #0
 8000468:	481c      	ldr	r0, [pc, #112]	; (80004dc <main+0xfc>)
 800046a:	4798      	blx	r3
	gReadyQueue.ENQUEUE(&(gReadyQueue.head), pIdleTask, REGULAR_ENQUEUE);
 800046c:	4b1a      	ldr	r3, [pc, #104]	; (80004d8 <main+0xf8>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4a16      	ldr	r2, [pc, #88]	; (80004cc <main+0xec>)
 8000472:	6811      	ldr	r1, [r2, #0]
 8000474:	2200      	movs	r2, #0
 8000476:	4819      	ldr	r0, [pc, #100]	; (80004dc <main+0xfc>)
 8000478:	4798      	blx	r3

	/* Update the current running task */
	Schedule();
 800047a:	f000 f833 	bl	80004e4 <Schedule>

	/* Initialize the 4 on-board LEDs */
	Led_Init();
 800047e:	f7ff ff45 	bl	800030c <Led_Init>

	/* Initialize SysTick to 1KHz */
	SysTick_Init(TICK_HZ);
 8000482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000486:	f000 f8bd 	bl	8000604 <SysTick_Init>

	/* Set PSP to the current running task's stack pointer and make it the active stack pointer. */
	Switch_SP_To_PSP();
 800048a:	f000 f979 	bl	8000780 <Switch_SP_To_PSP>

	/* Kick-start with the first task */
	gpCurrentRunningTask->task_handler();
 800048e:	4b14      	ldr	r3, [pc, #80]	; (80004e0 <main+0x100>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	691b      	ldr	r3, [r3, #16]
 8000494:	4798      	blx	r3

	while(1);
 8000496:	e7fe      	b.n	8000496 <main+0xb6>
 8000498:	2001ec00 	.word	0x2001ec00
 800049c:	20000004 	.word	0x20000004
 80004a0:	08000583 	.word	0x08000583
 80004a4:	20020000 	.word	0x20020000
 80004a8:	20000008 	.word	0x20000008
 80004ac:	080005a5 	.word	0x080005a5
 80004b0:	2001fc00 	.word	0x2001fc00
 80004b4:	2000000c 	.word	0x2000000c
 80004b8:	080005c7 	.word	0x080005c7
 80004bc:	2001f800 	.word	0x2001f800
 80004c0:	20000010 	.word	0x20000010
 80004c4:	080005e5 	.word	0x080005e5
 80004c8:	2001f400 	.word	0x2001f400
 80004cc:	20000000 	.word	0x20000000
 80004d0:	0800057d 	.word	0x0800057d
 80004d4:	2001f000 	.word	0x2001f000
 80004d8:	20000014 	.word	0x20000014
 80004dc:	20000018 	.word	0x20000018
 80004e0:	2000012c 	.word	0x2000012c

080004e4 <Schedule>:
  * @brief  Updates the variable current_running_task.
  * @param  None
  * @retval None
  */
void Schedule(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
	TaskControlBlock_t* pScheduledOutTask = NULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]

	/* Only in the beginning there's no running task */
	if(gpCurrentRunningTask == NULL)
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <Schedule+0x8c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d108      	bne.n	8000508 <Schedule+0x24>
	{
		gpCurrentRunningTask = gReadyQueue.DEQUEUE(&(gReadyQueue.head), DEQUEUE_WITH_REAR_IDLE_TASK);
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <Schedule+0x90>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	2101      	movs	r1, #1
 80004fc:	481e      	ldr	r0, [pc, #120]	; (8000578 <Schedule+0x94>)
 80004fe:	4798      	blx	r3
 8000500:	4603      	mov	r3, r0
 8000502:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <Schedule+0x8c>)
 8000504:	6013      	str	r3, [r2, #0]
				pScheduledOutTask = gpCurrentRunningTask;
				gpCurrentRunningTask = gReadyQueue.head; /* Schedule idle task */
			}
		}
	}
}
 8000506:	e02f      	b.n	8000568 <Schedule+0x84>
	else if(gReadyQueue.head->task_id != IDLE_TASK)
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <Schedule+0x90>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d019      	beq.n	8000546 <Schedule+0x62>
		pScheduledOutTask = gpCurrentRunningTask;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <Schedule+0x8c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	607b      	str	r3, [r7, #4]
		gpCurrentRunningTask = gReadyQueue.DEQUEUE(&(gReadyQueue.head), DEQUEUE_WITH_REAR_IDLE_TASK);
 8000518:	4b16      	ldr	r3, [pc, #88]	; (8000574 <Schedule+0x90>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	2101      	movs	r1, #1
 800051e:	4816      	ldr	r0, [pc, #88]	; (8000578 <Schedule+0x94>)
 8000520:	4798      	blx	r3
 8000522:	4603      	mov	r3, r0
 8000524:	4a12      	ldr	r2, [pc, #72]	; (8000570 <Schedule+0x8c>)
 8000526:	6013      	str	r3, [r2, #0]
		if(pScheduledOutTask->task_id != IDLE_TASK)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d01b      	beq.n	8000568 <Schedule+0x84>
			if(pScheduledOutTask->current_state == TASK_READY_STATE)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	7b1b      	ldrb	r3, [r3, #12]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d117      	bne.n	8000568 <Schedule+0x84>
				gReadyQueue.ENQUEUE(&(gReadyQueue.head), pScheduledOutTask, ENQUEUE_WITH_REAR_IDLE_TASK);
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <Schedule+0x90>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	2201      	movs	r2, #1
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <Schedule+0x94>)
 8000542:	4798      	blx	r3
}
 8000544:	e010      	b.n	8000568 <Schedule+0x84>
		if(gpCurrentRunningTask->task_id != IDLE_TASK)
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <Schedule+0x8c>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d00b      	beq.n	8000568 <Schedule+0x84>
			if(gpCurrentRunningTask->current_state != TASK_READY_STATE)
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <Schedule+0x8c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	7b1b      	ldrb	r3, [r3, #12]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d006      	beq.n	8000568 <Schedule+0x84>
				pScheduledOutTask = gpCurrentRunningTask;
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <Schedule+0x8c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	607b      	str	r3, [r7, #4]
				gpCurrentRunningTask = gReadyQueue.head; /* Schedule idle task */
 8000560:	4b04      	ldr	r3, [pc, #16]	; (8000574 <Schedule+0x90>)
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	4a02      	ldr	r2, [pc, #8]	; (8000570 <Schedule+0x8c>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	2000012c 	.word	0x2000012c
 8000574:	20000014 	.word	0x20000014
 8000578:	20000018 	.word	0x20000018

0800057c <IdleTask_Handler>:
  * @brief  Stuck in a while(1) loop and does nothing.
  * @param  None
  * @retval None
  */
void IdleTask_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	while(1);
 8000580:	e7fe      	b.n	8000580 <IdleTask_Handler+0x4>

08000582 <Task1_Handler>:
  * @brief  Toggles the green LED every 1 second.
  * @param  None
  * @retval None
  */
void Task1_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
	while(1)
	{
		Led_On(LED_GREEN);
 8000586:	200c      	movs	r0, #12
 8000588:	f7ff fefa 	bl	8000380 <Led_On>
		Task_Delay(DELAY_1S);
 800058c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000590:	f000 f916 	bl	80007c0 <Task_Delay>
		Led_Off(LED_GREEN);
 8000594:	200c      	movs	r0, #12
 8000596:	f7ff ff0b 	bl	80003b0 <Led_Off>
		Task_Delay(DELAY_1S);
 800059a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059e:	f000 f90f 	bl	80007c0 <Task_Delay>
		Led_On(LED_GREEN);
 80005a2:	e7f0      	b.n	8000586 <Task1_Handler+0x4>

080005a4 <Task2_Handler>:
  * @brief  Toggles the orange LED every 500 milliseconds.
  * @param  None
  * @retval None
  */
void Task2_Handler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	while(1)
	{
		Led_On(LED_ORANGE);
 80005a8:	200d      	movs	r0, #13
 80005aa:	f7ff fee9 	bl	8000380 <Led_On>
		Task_Delay(DELAY_500MS);
 80005ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b2:	f000 f905 	bl	80007c0 <Task_Delay>
		Led_Off(LED_ORANGE);
 80005b6:	200d      	movs	r0, #13
 80005b8:	f7ff fefa 	bl	80003b0 <Led_Off>
		Task_Delay(DELAY_500MS);
 80005bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c0:	f000 f8fe 	bl	80007c0 <Task_Delay>
		Led_On(LED_ORANGE);
 80005c4:	e7f0      	b.n	80005a8 <Task2_Handler+0x4>

080005c6 <Task3_Handler>:
  * @brief  Toggles the blue LED every 250 milliseconds.
  * @param  None
  * @retval None
  */
void Task3_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
	while(1)
	{
		Led_On(LED_BLUE);
 80005ca:	200f      	movs	r0, #15
 80005cc:	f7ff fed8 	bl	8000380 <Led_On>
		Task_Delay(DELAY_250MS);
 80005d0:	20fa      	movs	r0, #250	; 0xfa
 80005d2:	f000 f8f5 	bl	80007c0 <Task_Delay>
		Led_Off(LED_BLUE);
 80005d6:	200f      	movs	r0, #15
 80005d8:	f7ff feea 	bl	80003b0 <Led_Off>
		Task_Delay(DELAY_250MS);
 80005dc:	20fa      	movs	r0, #250	; 0xfa
 80005de:	f000 f8ef 	bl	80007c0 <Task_Delay>
		Led_On(LED_BLUE);
 80005e2:	e7f2      	b.n	80005ca <Task3_Handler+0x4>

080005e4 <Task4_Handler>:
  * @brief  Toggles the red LED every 125 milliseconds.
  * @param  None
  * @retval None
  */
void Task4_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	while(1)
	{
		Led_On(LED_RED);
 80005e8:	200e      	movs	r0, #14
 80005ea:	f7ff fec9 	bl	8000380 <Led_On>
		Task_Delay(DELAY_125MS);
 80005ee:	207d      	movs	r0, #125	; 0x7d
 80005f0:	f000 f8e6 	bl	80007c0 <Task_Delay>
		Led_Off(LED_RED);
 80005f4:	200e      	movs	r0, #14
 80005f6:	f7ff fedb 	bl	80003b0 <Led_Off>
		Task_Delay(DELAY_125MS);
 80005fa:	207d      	movs	r0, #125	; 0x7d
 80005fc:	f000 f8e0 	bl	80007c0 <Task_Delay>
		Led_On(LED_RED);
 8000600:	e7f2      	b.n	80005e8 <Task4_Handler+0x4>
	...

08000604 <SysTick_Init>:
  * @brief  Initialize the processor peripheral SysTick to a certain reload value.
  * @param  TickHz - The wanted ticking frequency in Hz.
  * @retval None
  */
void SysTick_Init(uint32_t TickHz)
{
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	/* Define pointers to relevant SysTick registers */
	uint32_t *pSYST_CSR = (uint32_t*)SYST_CSR; /* pointer to SysTick Control and Status Register */
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <SysTick_Init+0x60>)
 800060e:	617b      	str	r3, [r7, #20]
	uint32_t *pSYST_RVR = (uint32_t*)SYST_RVR; /* pointer to SysTick Reload Value Register */
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <SysTick_Init+0x64>)
 8000612:	613b      	str	r3, [r7, #16]

    /* Calculate the reload value */
	uint32_t SystemTicksInOneSecond = (SYSTICK_TIM_CLK/TickHz);
 8000614:	4a15      	ldr	r2, [pc, #84]	; (800066c <SysTick_Init+0x68>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	fbb2 f3f3 	udiv	r3, r2, r3
 800061c:	60fb      	str	r3, [r7, #12]
	uint32_t ReloadValue = SystemTicksInOneSecond-1;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	3b01      	subs	r3, #1
 8000622:	60bb      	str	r3, [r7, #8]

	/* Clear RVR and load the reload value */
	*pSYST_RVR &= ~(0x00FFFFFFFF);
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
	*pSYST_RVR |= ReloadValue;
 800062a:	693b      	ldr	r3, [r7, #16]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	431a      	orrs	r2, r3
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	601a      	str	r2, [r3, #0]

	/* Enable the SysTick features */
	*pSYST_CSR |= ( 1 << 1); /* Enable SysTick exception request - assert request */
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f043 0202 	orr.w	r2, r3, #2
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= ( 1 << 2); /* Indicates the clock source - processor clock */
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f043 0204 	orr.w	r2, r3, #4
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	601a      	str	r2, [r3, #0]
	*pSYST_CSR |= ( 1 << 0); /* Enable the counter */
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f043 0201 	orr.w	r2, r3, #1
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	601a      	str	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	e000e010 	.word	0xe000e010
 8000668:	e000e014 	.word	0xe000e014
 800066c:	00f42400 	.word	0x00f42400

08000670 <Scheduler_Stack_Init>:
  * @brief  Initializes MSP to the start of the scheduler's stack.
  * @param  SchedulerStackStart - Specifies the start of the scheduler's stack.
  * @retval None
  */
__attribute__((naked)) void Scheduler_Stack_Init(uint32_t SchedulerStackStart)
{
 8000670:	4603      	mov	r3, r0
	/* Move the value of scheduler_stack_start to MSP using a register */
	__asm volatile("MSR MSP,%0": : "r" (SchedulerStackStart) : );
 8000672:	f383 8808 	msr	MSP, r3

	/* Branch using LR */
	__asm volatile("BX LR");
 8000676:	4770      	bx	lr
}
 8000678:	bf00      	nop

0800067a <Task_Init>:
  * @param  pPSPValue - Pointer to the task's stack start that will be used as PSP.
  * @param  pTaskHandler - Pointer to the task handler function.
  * @retval None
  */
void Task_Init(TaskControlBlock_t *pTask, TaskID_e TaskID, uint32_t *pPSPValue, void (*pTaskHandler)(void))
{
 800067a:	b480      	push	{r7}
 800067c:	b087      	sub	sp, #28
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	607a      	str	r2, [r7, #4]
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	460b      	mov	r3, r1
 8000688:	72fb      	strb	r3, [r7, #11]
	/* Initialize task properties */
	pTask->task_id = TaskID;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	7afa      	ldrb	r2, [r7, #11]
 800068e:	701a      	strb	r2, [r3, #0]
	pTask->psp_value = pPSPValue;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	605a      	str	r2, [r3, #4]
	pTask->block_count = 0;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
	pTask->current_state = TASK_READY_STATE;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2200      	movs	r2, #0
 80006a0:	731a      	strb	r2, [r3, #12]
	pTask->task_handler = pTaskHandler;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	611a      	str	r2, [r3, #16]
	pTask->next = NULL;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]

	/* Get PSP value */
	uint32_t *pPSP = pTask->psp_value;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	617b      	str	r3, [r7, #20]

	/* Push dummy values for core registers xPSR, PC, LR */
	*(--pPSP) = DUMMY_XPSR; /* XPSR = 0x01000000, maintaining T-bit (bit 24) as 1*/
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	3b04      	subs	r3, #4
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006c0:	601a      	str	r2, [r3, #0]
	*(--pPSP) = (uint32_t) pTaskHandler; /* PC */
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3b04      	subs	r3, #4
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	601a      	str	r2, [r3, #0]
	*(--pPSP) = EXC_RETURN_THREAD_PSP; /* LR - EXC_RETURN = Return to thread mode and use PSP */
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3b04      	subs	r3, #4
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	f06f 0202 	mvn.w	r2, #2
 80006da:	601a      	str	r2, [r3, #0]

	/* Push zeros for core registers R0-R12*/
	for(int j = 0 ; j < 13 ; j++)
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	e008      	b.n	80006f4 <Task_Init+0x7a>
	{
		*(--pPSP) = 0;
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	3b04      	subs	r3, #4
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
	for(int j = 0 ; j < 13 ; j++)
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	3301      	adds	r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	2b0c      	cmp	r3, #12
 80006f8:	ddf3      	ble.n	80006e2 <Task_Init+0x68>
	}

	/* Save PSP value */
	pTask->psp_value = pPSP;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	605a      	str	r2, [r3, #4]
}
 8000700:	bf00      	nop
 8000702:	371c      	adds	r7, #28
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
	...

0800070c <System_Exceptions_Enable>:
  * Handler Control and State Register (SHCSR).
  * @param  None
  * @retval None
  */
void System_Exceptions_Enable(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
	/* Define a pointer to SHCSR */
	uint32_t *pSHCSR = (uint32_t*)SHCRS;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <System_Exceptions_Enable+0x38>)
 8000714:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); /* Enable MemManage exception  */
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); /* Enable BusFault exception   */
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); /* Enable UsageFault exception */
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	e000ed24 	.word	0xe000ed24

08000748 <Get_PSP_Value>:
  * @brief  Fetches the PSP value of the current running task and returns it.
  * @param  None
  * @retval PSP value of the current running task.
  */
uint32_t Get_PSP_Value(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	return (uint32_t)(gpCurrentRunningTask->psp_value);
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <Get_PSP_Value+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	685b      	ldr	r3, [r3, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	2000012c 	.word	0x2000012c

08000760 <Save_PSP_Value>:
  * @brief  Stores the PSP value of the current running task.
  * @param  CurrentPSPValue - The PSP value of the current running task.
  * @retval None
  */
void Save_PSP_Value(uint32_t CurrentPSPValue)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	gpCurrentRunningTask->psp_value = (uint32_t*)CurrentPSPValue;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <Save_PSP_Value+0x1c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	605a      	str	r2, [r3, #4]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	2000012c 	.word	0x2000012c

08000780 <Switch_SP_To_PSP>:
  * @retval None
  */
__attribute__((naked)) void Switch_SP_To_PSP(void)
{
	/* Set PSP to the current running task's stack pointer */
	__asm volatile ("PUSH {LR}");        /* Before branching, save LR which connects back to main(), on the scheduler stack*/
 8000780:	b500      	push	{lr}
	__asm volatile ("BL Get_PSP_Value"); /* Get the PSP value of the current running task */
 8000782:	f7ff ffe1 	bl	8000748 <Get_PSP_Value>
	__asm volatile ("MSR PSP,R0");       /* Set PSP. The value returned from Get_PSP_Value is stored in R0. */
 8000786:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");         /* Retrieve the LR value from the scheduler stack */
 800078a:	f85d eb04 	ldr.w	lr, [sp], #4

	/* Select SP to be PSP using the CONTROL core register */
	__asm volatile ("MOV R0,#0x2");      /* R0 = 0x2 */
 800078e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");   /* CONTROL[1] = SPSEL = 1 */
 8000792:	f380 8814 	msr	CONTROL, r0

	/* Branch back to main() */
	__asm volatile ("BX LR");
 8000796:	4770      	bx	lr
}
 8000798:	bf00      	nop
	...

0800079c <Pend_PendSV>:
  * @brief  Changes the PendSV exception state to pending.
  * @param  None
  * @retval None
  */
void Pend_PendSV(void)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
	/* Define a pointer to ICSR, a System Control Block register */
	uint32_t *pICSR = (uint32_t*)ICSR; /* ICSR - Interrupt Control and State Register */
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <Pend_PendSV+0x20>)
 80007a4:	607b      	str	r3, [r7, #4]

	/* Change the PendSV exception state to pending */
	*pICSR |= ( 1 << 28);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	e000ed04 	.word	0xe000ed04

080007c0 <Task_Delay>:
  * @brief  Puts the current running task in BLOCKED state and initiates a contect-switch (Task Yield).
  * @param  DelayTickCount - Specifies the duration in terms of SysTick ticks the task should be blocked.
  * @retval None
  */
void Task_Delay(uint32_t DelayTickCount)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	/* Disable interrupts */
	INTERRUPT_DISABLE();
 80007c8:	f04f 0001 	mov.w	r0, #1
 80007cc:	f380 8810 	msr	PRIMASK, r0

	/* Delay is relevant only for LED tasks */
	if(gpCurrentRunningTask->task_id != IDLE_TASK)
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <Task_Delay+0x54>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d013      	beq.n	8000802 <Task_Delay+0x42>
	{
		/* Set the task's block count to tick_count ticks from now*/
		gpCurrentRunningTask->block_count = gTickCount + DelayTickCount;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <Task_Delay+0x58>)
 80007dc:	6819      	ldr	r1, [r3, #0]
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <Task_Delay+0x54>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	440a      	add	r2, r1
 80007e6:	609a      	str	r2, [r3, #8]

		/* Change task state to BLOCKED */
		gpCurrentRunningTask->current_state = TASK_BLOCKED_STATE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <Task_Delay+0x54>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2201      	movs	r2, #1
 80007ee:	731a      	strb	r2, [r3, #12]

		/* Insert the blocked task to the blocked queue, and keep it sorted */
		gBlockedQueue.ENQUEUE(&(gBlockedQueue.head), gpCurrentRunningTask, ENQUEUE_SORTED);
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <Task_Delay+0x5c>)
 80007f2:	689b      	ldr	r3, [r3, #8]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <Task_Delay+0x54>)
 80007f6:	6811      	ldr	r1, [r2, #0]
 80007f8:	2202      	movs	r2, #2
 80007fa:	4809      	ldr	r0, [pc, #36]	; (8000820 <Task_Delay+0x60>)
 80007fc:	4798      	blx	r3

		/* Pend the PendSV exception and initiate a contect-switch */
		Pend_PendSV();
 80007fe:	f7ff ffcd 	bl	800079c <Pend_PendSV>
	}

	/* Enable interrupts */
	INTERRUPT_ENABLE();
 8000802:	f04f 0000 	mov.w	r0, #0
 8000806:	f380 8810 	msr	PRIMASK, r0
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000012c 	.word	0x2000012c
 8000818:	20000130 	.word	0x20000130
 800081c:	20000024 	.word	0x20000024
 8000820:	20000028 	.word	0x20000028

08000824 <Increment_Global_Tick_Count>:
  * @brief  Increments the global tick count variable g_tick_count.
  * @param  None
  * @retval None
  */
void Increment_Global_Tick_Count(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	gTickCount++;
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <Increment_Global_Tick_Count+0x18>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a03      	ldr	r2, [pc, #12]	; (800083c <Increment_Global_Tick_Count+0x18>)
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000130 	.word	0x20000130

08000840 <Unblock_Tasks>:
  * @brief  Checks the blocked queue and puts qualified tasks in READY state.
  * @param  None
  * @retval None
  */
void Unblock_Tasks(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	/* It's enough to check the head in each iteration, since the queue is sorted and qualified tasks
	 * get unblocked immediately */
	while(gBlockedQueue.head != NULL)
 8000846:	e015      	b.n	8000874 <Unblock_Tasks+0x34>
	{
		if(gBlockedQueue.head->block_count == gTickCount)
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <Unblock_Tasks+0x48>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <Unblock_Tasks+0x4c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	d113      	bne.n	800087e <Unblock_Tasks+0x3e>
		{

			/* Dequeue the qualified task */
			TaskControlBlock_t* temp = gBlockedQueue.DEQUEUE(&(gBlockedQueue.head), REGULAR_DEQUEUE);
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <Unblock_Tasks+0x48>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	2100      	movs	r1, #0
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <Unblock_Tasks+0x50>)
 800085e:	4798      	blx	r3
 8000860:	6078      	str	r0, [r7, #4]

			/* Change task state to READY */
			temp->current_state = TASK_READY_STATE;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2200      	movs	r2, #0
 8000866:	731a      	strb	r2, [r3, #12]

			/* Insert the ready task to the ready queue */
			gReadyQueue.ENQUEUE(&(gReadyQueue.head), temp, ENQUEUE_WITH_REAR_IDLE_TASK);
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <Unblock_Tasks+0x54>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	2201      	movs	r2, #1
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	4809      	ldr	r0, [pc, #36]	; (8000898 <Unblock_Tasks+0x58>)
 8000872:	4798      	blx	r3
	while(gBlockedQueue.head != NULL)
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <Unblock_Tasks+0x48>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1e5      	bne.n	8000848 <Unblock_Tasks+0x8>
		else
		{
			break;
		}
	}
}
 800087c:	e000      	b.n	8000880 <Unblock_Tasks+0x40>
			break;
 800087e:	bf00      	nop
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000024 	.word	0x20000024
 800088c:	20000130 	.word	0x20000130
 8000890:	20000028 	.word	0x20000028
 8000894:	20000014 	.word	0x20000014
 8000898:	20000018 	.word	0x20000018

0800089c <Enqueue>:
	                                      block_count property, and the new task is placed according
	                                      to its block_count value
  * @retval None
  */
void Enqueue(TaskControlBlock_t **pHead, TaskControlBlock_t *pTask, EnqueueMode_e EnqueueMode)
{
 800089c:	b480      	push	{r7}
 800089e:	b08b      	sub	sp, #44	; 0x2c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71fb      	strb	r3, [r7, #7]
	/* Enqueue a task while maintaining the idle task at the back */
	if(EnqueueMode == ENQUEUE_WITH_REAR_IDLE_TASK)
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d12d      	bne.n	800090c <Enqueue+0x70>
	{
		/* The queue is empty, the new task becomes the queue head */
		if (*pHead == NULL)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d106      	bne.n	80008c6 <Enqueue+0x2a>
		{
			*pHead = pTask;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	601a      	str	r2, [r3, #0]
			pTask->next = NULL;
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
				prev->next = pTask;
				pTask->next = NULL;
			}
		}
	}
}
 80008c4:	e083      	b.n	80009ce <Enqueue+0x132>
		else if((*pHead)->task_id == IDLE_TASK)
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d107      	bne.n	80008e0 <Enqueue+0x44>
			pTask->next = *pHead;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	615a      	str	r2, [r3, #20]
			*pHead = pTask;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	601a      	str	r2, [r3, #0]
}
 80008de:	e076      	b.n	80009ce <Enqueue+0x132>
			TaskControlBlock_t* iter = *pHead;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
			while (iter->next->task_id != IDLE_TASK)
 80008e6:	e002      	b.n	80008ee <Enqueue+0x52>
				iter = iter->next;
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
			while (iter->next->task_id != IDLE_TASK)
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f7      	bne.n	80008e8 <Enqueue+0x4c>
			TaskControlBlock_t* temp = iter->next;
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	617b      	str	r3, [r7, #20]
			iter->next = pTask;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	615a      	str	r2, [r3, #20]
			pTask->next = temp;
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	615a      	str	r2, [r3, #20]
}
 800090a:	e060      	b.n	80009ce <Enqueue+0x132>
	else if(EnqueueMode == REGULAR_ENQUEUE)
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d11c      	bne.n	800094c <Enqueue+0xb0>
		if (*pHead == NULL)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d106      	bne.n	8000928 <Enqueue+0x8c>
			*pHead = pTask;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	68ba      	ldr	r2, [r7, #8]
 800091e:	601a      	str	r2, [r3, #0]
			pTask->next = NULL;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
}
 8000926:	e052      	b.n	80009ce <Enqueue+0x132>
			TaskControlBlock_t* iter = *pHead;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	623b      	str	r3, [r7, #32]
			while (iter->next != NULL)
 800092e:	e002      	b.n	8000936 <Enqueue+0x9a>
				iter = iter->next;
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	623b      	str	r3, [r7, #32]
			while (iter->next != NULL)
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1f8      	bne.n	8000930 <Enqueue+0x94>
			iter->next = pTask;
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	615a      	str	r2, [r3, #20]
			pTask->next = NULL;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
}
 800094a:	e040      	b.n	80009ce <Enqueue+0x132>
		if (*pHead == NULL)
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d106      	bne.n	8000962 <Enqueue+0xc6>
			*pHead = pTask;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	601a      	str	r2, [r3, #0]
			pTask->next = NULL;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
}
 8000960:	e035      	b.n	80009ce <Enqueue+0x132>
		else if((*pHead)->block_count > pTask->block_count)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	689a      	ldr	r2, [r3, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	429a      	cmp	r2, r3
 800096e:	d907      	bls.n	8000980 <Enqueue+0xe4>
			pTask->next = *pHead;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	615a      	str	r2, [r3, #20]
			*pHead = pTask;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	601a      	str	r2, [r3, #0]
}
 800097e:	e026      	b.n	80009ce <Enqueue+0x132>
			TaskControlBlock_t* prev = *pHead;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	61fb      	str	r3, [r7, #28]
			TaskControlBlock_t* iter = (*pHead)->next;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	61bb      	str	r3, [r7, #24]
			while(iter != NULL)
 800098e:	e012      	b.n	80009b6 <Enqueue+0x11a>
				if(iter->block_count < pTask->block_count)
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	429a      	cmp	r2, r3
 800099a:	d205      	bcs.n	80009a8 <Enqueue+0x10c>
					prev = iter;
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	61fb      	str	r3, [r7, #28]
					iter = iter->next;
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	61bb      	str	r3, [r7, #24]
 80009a6:	e006      	b.n	80009b6 <Enqueue+0x11a>
					prev->next = pTask;
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	615a      	str	r2, [r3, #20]
					pTask->next = iter;
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	615a      	str	r2, [r3, #20]
					break;
 80009b4:	e002      	b.n	80009bc <Enqueue+0x120>
			while(iter != NULL)
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1e9      	bne.n	8000990 <Enqueue+0xf4>
			if(iter == NULL)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d105      	bne.n	80009ce <Enqueue+0x132>
				prev->next = pTask;
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	615a      	str	r2, [r3, #20]
				pTask->next = NULL;
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
}
 80009ce:	bf00      	nop
 80009d0:	372c      	adds	r7, #44	; 0x2c
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <Dequeue>:
  *                 @arg DEQUEUE_WITH_REAR_IDLE_TASK : The task is dequeued from the beginning of the
  *                                                    queue, but the idle task is not dequeued.
  * @retval None
  */
TaskControlBlock_t* Dequeue(TaskControlBlock_t **pHead, DequeueMode_e DequeueMode)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	70fb      	strb	r3, [r7, #3]
	if(DequeueMode == DEQUEUE_WITH_REAR_IDLE_TASK)
 80009e4:	78fb      	ldrb	r3, [r7, #3]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d11c      	bne.n	8000a24 <Dequeue+0x4c>
	{
		if (*pHead == NULL)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d104      	bne.n	80009fc <Dequeue+0x24>
		{
			printf("Error: trying to dequeue from an empty list");
 80009f2:	4817      	ldr	r0, [pc, #92]	; (8000a50 <Dequeue+0x78>)
 80009f4:	f000 f952 	bl	8000c9c <iprintf>
			return NULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	e025      	b.n	8000a48 <Dequeue+0x70>
		}
		else if((*pHead)->task_id == IDLE_TASK)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d104      	bne.n	8000a10 <Dequeue+0x38>
		{
			printf("Error: trying to dequeue idle task from the ready list");
 8000a06:	4813      	ldr	r0, [pc, #76]	; (8000a54 <Dequeue+0x7c>)
 8000a08:	f000 f948 	bl	8000c9c <iprintf>
			return NULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e01b      	b.n	8000a48 <Dequeue+0x70>
		}
		else
		{
			TaskControlBlock_t* temp = *pHead;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60bb      	str	r3, [r7, #8]
			*pHead = (*pHead)->next;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	695a      	ldr	r2, [r3, #20]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	601a      	str	r2, [r3, #0]
			return temp;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	e011      	b.n	8000a48 <Dequeue+0x70>
		}
	}

	else //if(dequeue_mode == REGULAR_DEQUEUE)
	{
		if (*pHead == NULL)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d104      	bne.n	8000a36 <Dequeue+0x5e>
		{
			printf("Error: trying to dequeue from an empty list");
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <Dequeue+0x78>)
 8000a2e:	f000 f935 	bl	8000c9c <iprintf>
			return NULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e008      	b.n	8000a48 <Dequeue+0x70>
		}
		else
		{
			TaskControlBlock_t* temp = *pHead;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	60fb      	str	r3, [r7, #12]
			*pHead = (*pHead)->next;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	695a      	ldr	r2, [r3, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
			return temp;
 8000a46:	68fb      	ldr	r3, [r7, #12]
		}
	}
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	08001d0c 	.word	0x08001d0c
 8000a54:	08001d38 	.word	0x08001d38

08000a58 <ITM_SendChar>:
#define DEMCR                                *((volatile uint32_t*) 0xE000EDFCU )
/* ITM register addresses */
#define ITM_STIMULUS_PORT0           *((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN                  *((volatile uint32_t*) 0xE0000E00 )
void ITM_SendChar(uint8_t ch)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
        //Enable TRCENA
        DEMCR |= ( 1 << 24);
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <ITM_SendChar+0x44>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <ITM_SendChar+0x44>)
 8000a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a6c:	6013      	str	r3, [r2, #0]
        //enable stimulus port 0
        ITM_TRACE_EN |= ( 1 << 0);
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <ITM_SendChar+0x48>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <ITM_SendChar+0x48>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6013      	str	r3, [r2, #0]
        // read FIFO status in bit [0]:
        while(!(ITM_STIMULUS_PORT0 & 1));
 8000a7a:	bf00      	nop
 8000a7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f8      	beq.n	8000a7c <ITM_SendChar+0x24>
        //Write to ITM stimulus port0
        ITM_STIMULUS_PORT0 = ch;
 8000a8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	6013      	str	r3, [r2, #0]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	e000edfc 	.word	0xe000edfc
 8000aa0:	e0000e00 	.word	0xe0000e00

08000aa4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	e00a      	b.n	8000acc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ab6:	f3af 8000 	nop.w
 8000aba:	4601      	mov	r1, r0
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	60ba      	str	r2, [r7, #8]
 8000ac2:	b2ca      	uxtb	r2, r1
 8000ac4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	dbf0      	blt.n	8000ab6 <_read+0x12>
	}

return len;
 8000ad4:	687b      	ldr	r3, [r7, #4]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e009      	b.n	8000b04 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	60ba      	str	r2, [r7, #8]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ffad 	bl	8000a58 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3301      	adds	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	dbf1      	blt.n	8000af0 <_write+0x12>
		//__io_putchar(*ptr++);
	}
	return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <_close>:

int _close(int file)
{
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3c:	605a      	str	r2, [r3, #4]
	return 0;
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <_isatty>:

int _isatty(int file)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
	return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
	return 0;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
	...

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f000 f846 	bl	8000c38 <__errno>
 8000bac:	4603      	mov	r3, r0
 8000bae:	220c      	movs	r2, #12
 8000bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20020000 	.word	0x20020000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	20000134 	.word	0x20000134
 8000be0:	20000148 	.word	0x20000148

08000be4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	; (8000c24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <LoopForever+0xe>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	; (8000c30 <LoopForever+0x16>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c12:	f000 f817 	bl	8000c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c16:	f7ff fbe3 	bl	80003e0 <main>

08000c1a <LoopForever>:

LoopForever:
    b LoopForever
 8000c1a:	e7fe      	b.n	8000c1a <LoopForever>
  ldr   r0, =_estack
 8000c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000c28:	08001e10 	.word	0x08001e10
  ldr r2, =_sbss
 8000c2c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000c30:	20000148 	.word	0x20000148

08000c34 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>
	...

08000c38 <__errno>:
 8000c38:	4b01      	ldr	r3, [pc, #4]	; (8000c40 <__errno+0x8>)
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000034 	.word	0x20000034

08000c44 <__libc_init_array>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	4d0d      	ldr	r5, [pc, #52]	; (8000c7c <__libc_init_array+0x38>)
 8000c48:	4c0d      	ldr	r4, [pc, #52]	; (8000c80 <__libc_init_array+0x3c>)
 8000c4a:	1b64      	subs	r4, r4, r5
 8000c4c:	10a4      	asrs	r4, r4, #2
 8000c4e:	2600      	movs	r6, #0
 8000c50:	42a6      	cmp	r6, r4
 8000c52:	d109      	bne.n	8000c68 <__libc_init_array+0x24>
 8000c54:	4d0b      	ldr	r5, [pc, #44]	; (8000c84 <__libc_init_array+0x40>)
 8000c56:	4c0c      	ldr	r4, [pc, #48]	; (8000c88 <__libc_init_array+0x44>)
 8000c58:	f001 f81c 	bl	8001c94 <_init>
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	10a4      	asrs	r4, r4, #2
 8000c60:	2600      	movs	r6, #0
 8000c62:	42a6      	cmp	r6, r4
 8000c64:	d105      	bne.n	8000c72 <__libc_init_array+0x2e>
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c6c:	4798      	blx	r3
 8000c6e:	3601      	adds	r6, #1
 8000c70:	e7ee      	b.n	8000c50 <__libc_init_array+0xc>
 8000c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c76:	4798      	blx	r3
 8000c78:	3601      	adds	r6, #1
 8000c7a:	e7f2      	b.n	8000c62 <__libc_init_array+0x1e>
 8000c7c:	08001e08 	.word	0x08001e08
 8000c80:	08001e08 	.word	0x08001e08
 8000c84:	08001e08 	.word	0x08001e08
 8000c88:	08001e0c 	.word	0x08001e0c

08000c8c <memset>:
 8000c8c:	4402      	add	r2, r0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d100      	bne.n	8000c96 <memset+0xa>
 8000c94:	4770      	bx	lr
 8000c96:	f803 1b01 	strb.w	r1, [r3], #1
 8000c9a:	e7f9      	b.n	8000c90 <memset+0x4>

08000c9c <iprintf>:
 8000c9c:	b40f      	push	{r0, r1, r2, r3}
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <iprintf+0x2c>)
 8000ca0:	b513      	push	{r0, r1, r4, lr}
 8000ca2:	681c      	ldr	r4, [r3, #0]
 8000ca4:	b124      	cbz	r4, 8000cb0 <iprintf+0x14>
 8000ca6:	69a3      	ldr	r3, [r4, #24]
 8000ca8:	b913      	cbnz	r3, 8000cb0 <iprintf+0x14>
 8000caa:	4620      	mov	r0, r4
 8000cac:	f000 fa5a 	bl	8001164 <__sinit>
 8000cb0:	ab05      	add	r3, sp, #20
 8000cb2:	9a04      	ldr	r2, [sp, #16]
 8000cb4:	68a1      	ldr	r1, [r4, #8]
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f000 fc5f 	bl	800157c <_vfiprintf_r>
 8000cbe:	b002      	add	sp, #8
 8000cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr
 8000cc8:	20000034 	.word	0x20000034

08000ccc <_puts_r>:
 8000ccc:	b570      	push	{r4, r5, r6, lr}
 8000cce:	460e      	mov	r6, r1
 8000cd0:	4605      	mov	r5, r0
 8000cd2:	b118      	cbz	r0, 8000cdc <_puts_r+0x10>
 8000cd4:	6983      	ldr	r3, [r0, #24]
 8000cd6:	b90b      	cbnz	r3, 8000cdc <_puts_r+0x10>
 8000cd8:	f000 fa44 	bl	8001164 <__sinit>
 8000cdc:	69ab      	ldr	r3, [r5, #24]
 8000cde:	68ac      	ldr	r4, [r5, #8]
 8000ce0:	b913      	cbnz	r3, 8000ce8 <_puts_r+0x1c>
 8000ce2:	4628      	mov	r0, r5
 8000ce4:	f000 fa3e 	bl	8001164 <__sinit>
 8000ce8:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <_puts_r+0xd0>)
 8000cea:	429c      	cmp	r4, r3
 8000cec:	d120      	bne.n	8000d30 <_puts_r+0x64>
 8000cee:	686c      	ldr	r4, [r5, #4]
 8000cf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cf2:	07db      	lsls	r3, r3, #31
 8000cf4:	d405      	bmi.n	8000d02 <_puts_r+0x36>
 8000cf6:	89a3      	ldrh	r3, [r4, #12]
 8000cf8:	0598      	lsls	r0, r3, #22
 8000cfa:	d402      	bmi.n	8000d02 <_puts_r+0x36>
 8000cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cfe:	f000 facf 	bl	80012a0 <__retarget_lock_acquire_recursive>
 8000d02:	89a3      	ldrh	r3, [r4, #12]
 8000d04:	0719      	lsls	r1, r3, #28
 8000d06:	d51d      	bpl.n	8000d44 <_puts_r+0x78>
 8000d08:	6923      	ldr	r3, [r4, #16]
 8000d0a:	b1db      	cbz	r3, 8000d44 <_puts_r+0x78>
 8000d0c:	3e01      	subs	r6, #1
 8000d0e:	68a3      	ldr	r3, [r4, #8]
 8000d10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000d14:	3b01      	subs	r3, #1
 8000d16:	60a3      	str	r3, [r4, #8]
 8000d18:	bb39      	cbnz	r1, 8000d6a <_puts_r+0x9e>
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da38      	bge.n	8000d90 <_puts_r+0xc4>
 8000d1e:	4622      	mov	r2, r4
 8000d20:	210a      	movs	r1, #10
 8000d22:	4628      	mov	r0, r5
 8000d24:	f000 f848 	bl	8000db8 <__swbuf_r>
 8000d28:	3001      	adds	r0, #1
 8000d2a:	d011      	beq.n	8000d50 <_puts_r+0x84>
 8000d2c:	250a      	movs	r5, #10
 8000d2e:	e011      	b.n	8000d54 <_puts_r+0x88>
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <_puts_r+0xd4>)
 8000d32:	429c      	cmp	r4, r3
 8000d34:	d101      	bne.n	8000d3a <_puts_r+0x6e>
 8000d36:	68ac      	ldr	r4, [r5, #8]
 8000d38:	e7da      	b.n	8000cf0 <_puts_r+0x24>
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <_puts_r+0xd8>)
 8000d3c:	429c      	cmp	r4, r3
 8000d3e:	bf08      	it	eq
 8000d40:	68ec      	ldreq	r4, [r5, #12]
 8000d42:	e7d5      	b.n	8000cf0 <_puts_r+0x24>
 8000d44:	4621      	mov	r1, r4
 8000d46:	4628      	mov	r0, r5
 8000d48:	f000 f888 	bl	8000e5c <__swsetup_r>
 8000d4c:	2800      	cmp	r0, #0
 8000d4e:	d0dd      	beq.n	8000d0c <_puts_r+0x40>
 8000d50:	f04f 35ff 	mov.w	r5, #4294967295
 8000d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d56:	07da      	lsls	r2, r3, #31
 8000d58:	d405      	bmi.n	8000d66 <_puts_r+0x9a>
 8000d5a:	89a3      	ldrh	r3, [r4, #12]
 8000d5c:	059b      	lsls	r3, r3, #22
 8000d5e:	d402      	bmi.n	8000d66 <_puts_r+0x9a>
 8000d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d62:	f000 fa9e 	bl	80012a2 <__retarget_lock_release_recursive>
 8000d66:	4628      	mov	r0, r5
 8000d68:	bd70      	pop	{r4, r5, r6, pc}
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	da04      	bge.n	8000d78 <_puts_r+0xac>
 8000d6e:	69a2      	ldr	r2, [r4, #24]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dc06      	bgt.n	8000d82 <_puts_r+0xb6>
 8000d74:	290a      	cmp	r1, #10
 8000d76:	d004      	beq.n	8000d82 <_puts_r+0xb6>
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	6022      	str	r2, [r4, #0]
 8000d7e:	7019      	strb	r1, [r3, #0]
 8000d80:	e7c5      	b.n	8000d0e <_puts_r+0x42>
 8000d82:	4622      	mov	r2, r4
 8000d84:	4628      	mov	r0, r5
 8000d86:	f000 f817 	bl	8000db8 <__swbuf_r>
 8000d8a:	3001      	adds	r0, #1
 8000d8c:	d1bf      	bne.n	8000d0e <_puts_r+0x42>
 8000d8e:	e7df      	b.n	8000d50 <_puts_r+0x84>
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	250a      	movs	r5, #10
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	6022      	str	r2, [r4, #0]
 8000d98:	701d      	strb	r5, [r3, #0]
 8000d9a:	e7db      	b.n	8000d54 <_puts_r+0x88>
 8000d9c:	08001d94 	.word	0x08001d94
 8000da0:	08001db4 	.word	0x08001db4
 8000da4:	08001d74 	.word	0x08001d74

08000da8 <puts>:
 8000da8:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <puts+0xc>)
 8000daa:	4601      	mov	r1, r0
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	f7ff bf8d 	b.w	8000ccc <_puts_r>
 8000db2:	bf00      	nop
 8000db4:	20000034 	.word	0x20000034

08000db8 <__swbuf_r>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	460e      	mov	r6, r1
 8000dbc:	4614      	mov	r4, r2
 8000dbe:	4605      	mov	r5, r0
 8000dc0:	b118      	cbz	r0, 8000dca <__swbuf_r+0x12>
 8000dc2:	6983      	ldr	r3, [r0, #24]
 8000dc4:	b90b      	cbnz	r3, 8000dca <__swbuf_r+0x12>
 8000dc6:	f000 f9cd 	bl	8001164 <__sinit>
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <__swbuf_r+0x98>)
 8000dcc:	429c      	cmp	r4, r3
 8000dce:	d12b      	bne.n	8000e28 <__swbuf_r+0x70>
 8000dd0:	686c      	ldr	r4, [r5, #4]
 8000dd2:	69a3      	ldr	r3, [r4, #24]
 8000dd4:	60a3      	str	r3, [r4, #8]
 8000dd6:	89a3      	ldrh	r3, [r4, #12]
 8000dd8:	071a      	lsls	r2, r3, #28
 8000dda:	d52f      	bpl.n	8000e3c <__swbuf_r+0x84>
 8000ddc:	6923      	ldr	r3, [r4, #16]
 8000dde:	b36b      	cbz	r3, 8000e3c <__swbuf_r+0x84>
 8000de0:	6923      	ldr	r3, [r4, #16]
 8000de2:	6820      	ldr	r0, [r4, #0]
 8000de4:	1ac0      	subs	r0, r0, r3
 8000de6:	6963      	ldr	r3, [r4, #20]
 8000de8:	b2f6      	uxtb	r6, r6
 8000dea:	4283      	cmp	r3, r0
 8000dec:	4637      	mov	r7, r6
 8000dee:	dc04      	bgt.n	8000dfa <__swbuf_r+0x42>
 8000df0:	4621      	mov	r1, r4
 8000df2:	4628      	mov	r0, r5
 8000df4:	f000 f922 	bl	800103c <_fflush_r>
 8000df8:	bb30      	cbnz	r0, 8000e48 <__swbuf_r+0x90>
 8000dfa:	68a3      	ldr	r3, [r4, #8]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	60a3      	str	r3, [r4, #8]
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	6022      	str	r2, [r4, #0]
 8000e06:	701e      	strb	r6, [r3, #0]
 8000e08:	6963      	ldr	r3, [r4, #20]
 8000e0a:	3001      	adds	r0, #1
 8000e0c:	4283      	cmp	r3, r0
 8000e0e:	d004      	beq.n	8000e1a <__swbuf_r+0x62>
 8000e10:	89a3      	ldrh	r3, [r4, #12]
 8000e12:	07db      	lsls	r3, r3, #31
 8000e14:	d506      	bpl.n	8000e24 <__swbuf_r+0x6c>
 8000e16:	2e0a      	cmp	r6, #10
 8000e18:	d104      	bne.n	8000e24 <__swbuf_r+0x6c>
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f000 f90d 	bl	800103c <_fflush_r>
 8000e22:	b988      	cbnz	r0, 8000e48 <__swbuf_r+0x90>
 8000e24:	4638      	mov	r0, r7
 8000e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <__swbuf_r+0x9c>)
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d101      	bne.n	8000e32 <__swbuf_r+0x7a>
 8000e2e:	68ac      	ldr	r4, [r5, #8]
 8000e30:	e7cf      	b.n	8000dd2 <__swbuf_r+0x1a>
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <__swbuf_r+0xa0>)
 8000e34:	429c      	cmp	r4, r3
 8000e36:	bf08      	it	eq
 8000e38:	68ec      	ldreq	r4, [r5, #12]
 8000e3a:	e7ca      	b.n	8000dd2 <__swbuf_r+0x1a>
 8000e3c:	4621      	mov	r1, r4
 8000e3e:	4628      	mov	r0, r5
 8000e40:	f000 f80c 	bl	8000e5c <__swsetup_r>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d0cb      	beq.n	8000de0 <__swbuf_r+0x28>
 8000e48:	f04f 37ff 	mov.w	r7, #4294967295
 8000e4c:	e7ea      	b.n	8000e24 <__swbuf_r+0x6c>
 8000e4e:	bf00      	nop
 8000e50:	08001d94 	.word	0x08001d94
 8000e54:	08001db4 	.word	0x08001db4
 8000e58:	08001d74 	.word	0x08001d74

08000e5c <__swsetup_r>:
 8000e5c:	4b32      	ldr	r3, [pc, #200]	; (8000f28 <__swsetup_r+0xcc>)
 8000e5e:	b570      	push	{r4, r5, r6, lr}
 8000e60:	681d      	ldr	r5, [r3, #0]
 8000e62:	4606      	mov	r6, r0
 8000e64:	460c      	mov	r4, r1
 8000e66:	b125      	cbz	r5, 8000e72 <__swsetup_r+0x16>
 8000e68:	69ab      	ldr	r3, [r5, #24]
 8000e6a:	b913      	cbnz	r3, 8000e72 <__swsetup_r+0x16>
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	f000 f979 	bl	8001164 <__sinit>
 8000e72:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <__swsetup_r+0xd0>)
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d10f      	bne.n	8000e98 <__swsetup_r+0x3c>
 8000e78:	686c      	ldr	r4, [r5, #4]
 8000e7a:	89a3      	ldrh	r3, [r4, #12]
 8000e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000e80:	0719      	lsls	r1, r3, #28
 8000e82:	d42c      	bmi.n	8000ede <__swsetup_r+0x82>
 8000e84:	06dd      	lsls	r5, r3, #27
 8000e86:	d411      	bmi.n	8000eac <__swsetup_r+0x50>
 8000e88:	2309      	movs	r3, #9
 8000e8a:	6033      	str	r3, [r6, #0]
 8000e8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000e90:	81a3      	strh	r3, [r4, #12]
 8000e92:	f04f 30ff 	mov.w	r0, #4294967295
 8000e96:	e03e      	b.n	8000f16 <__swsetup_r+0xba>
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <__swsetup_r+0xd4>)
 8000e9a:	429c      	cmp	r4, r3
 8000e9c:	d101      	bne.n	8000ea2 <__swsetup_r+0x46>
 8000e9e:	68ac      	ldr	r4, [r5, #8]
 8000ea0:	e7eb      	b.n	8000e7a <__swsetup_r+0x1e>
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <__swsetup_r+0xd8>)
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	bf08      	it	eq
 8000ea8:	68ec      	ldreq	r4, [r5, #12]
 8000eaa:	e7e6      	b.n	8000e7a <__swsetup_r+0x1e>
 8000eac:	0758      	lsls	r0, r3, #29
 8000eae:	d512      	bpl.n	8000ed6 <__swsetup_r+0x7a>
 8000eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000eb2:	b141      	cbz	r1, 8000ec6 <__swsetup_r+0x6a>
 8000eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	d002      	beq.n	8000ec2 <__swsetup_r+0x66>
 8000ebc:	4630      	mov	r0, r6
 8000ebe:	f000 fa57 	bl	8001370 <_free_r>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8000ec6:	89a3      	ldrh	r3, [r4, #12]
 8000ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000ecc:	81a3      	strh	r3, [r4, #12]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	6063      	str	r3, [r4, #4]
 8000ed2:	6923      	ldr	r3, [r4, #16]
 8000ed4:	6023      	str	r3, [r4, #0]
 8000ed6:	89a3      	ldrh	r3, [r4, #12]
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	81a3      	strh	r3, [r4, #12]
 8000ede:	6923      	ldr	r3, [r4, #16]
 8000ee0:	b94b      	cbnz	r3, 8000ef6 <__swsetup_r+0x9a>
 8000ee2:	89a3      	ldrh	r3, [r4, #12]
 8000ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000eec:	d003      	beq.n	8000ef6 <__swsetup_r+0x9a>
 8000eee:	4621      	mov	r1, r4
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	f000 f9fd 	bl	80012f0 <__smakebuf_r>
 8000ef6:	89a0      	ldrh	r0, [r4, #12]
 8000ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000efc:	f010 0301 	ands.w	r3, r0, #1
 8000f00:	d00a      	beq.n	8000f18 <__swsetup_r+0xbc>
 8000f02:	2300      	movs	r3, #0
 8000f04:	60a3      	str	r3, [r4, #8]
 8000f06:	6963      	ldr	r3, [r4, #20]
 8000f08:	425b      	negs	r3, r3
 8000f0a:	61a3      	str	r3, [r4, #24]
 8000f0c:	6923      	ldr	r3, [r4, #16]
 8000f0e:	b943      	cbnz	r3, 8000f22 <__swsetup_r+0xc6>
 8000f10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000f14:	d1ba      	bne.n	8000e8c <__swsetup_r+0x30>
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
 8000f18:	0781      	lsls	r1, r0, #30
 8000f1a:	bf58      	it	pl
 8000f1c:	6963      	ldrpl	r3, [r4, #20]
 8000f1e:	60a3      	str	r3, [r4, #8]
 8000f20:	e7f4      	b.n	8000f0c <__swsetup_r+0xb0>
 8000f22:	2000      	movs	r0, #0
 8000f24:	e7f7      	b.n	8000f16 <__swsetup_r+0xba>
 8000f26:	bf00      	nop
 8000f28:	20000034 	.word	0x20000034
 8000f2c:	08001d94 	.word	0x08001d94
 8000f30:	08001db4 	.word	0x08001db4
 8000f34:	08001d74 	.word	0x08001d74

08000f38 <__sflush_r>:
 8000f38:	898a      	ldrh	r2, [r1, #12]
 8000f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3c:	4605      	mov	r5, r0
 8000f3e:	0710      	lsls	r0, r2, #28
 8000f40:	460c      	mov	r4, r1
 8000f42:	d457      	bmi.n	8000ff4 <__sflush_r+0xbc>
 8000f44:	684b      	ldr	r3, [r1, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	dc04      	bgt.n	8000f54 <__sflush_r+0x1c>
 8000f4a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	dc01      	bgt.n	8000f54 <__sflush_r+0x1c>
 8000f50:	2000      	movs	r0, #0
 8000f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	d0fa      	beq.n	8000f50 <__sflush_r+0x18>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f60:	682f      	ldr	r7, [r5, #0]
 8000f62:	602b      	str	r3, [r5, #0]
 8000f64:	d032      	beq.n	8000fcc <__sflush_r+0x94>
 8000f66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f68:	89a3      	ldrh	r3, [r4, #12]
 8000f6a:	075a      	lsls	r2, r3, #29
 8000f6c:	d505      	bpl.n	8000f7a <__sflush_r+0x42>
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	1ac0      	subs	r0, r0, r3
 8000f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f74:	b10b      	cbz	r3, 8000f7a <__sflush_r+0x42>
 8000f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f78:	1ac0      	subs	r0, r0, r3
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f80:	6a21      	ldr	r1, [r4, #32]
 8000f82:	4628      	mov	r0, r5
 8000f84:	47b0      	blx	r6
 8000f86:	1c43      	adds	r3, r0, #1
 8000f88:	89a3      	ldrh	r3, [r4, #12]
 8000f8a:	d106      	bne.n	8000f9a <__sflush_r+0x62>
 8000f8c:	6829      	ldr	r1, [r5, #0]
 8000f8e:	291d      	cmp	r1, #29
 8000f90:	d82c      	bhi.n	8000fec <__sflush_r+0xb4>
 8000f92:	4a29      	ldr	r2, [pc, #164]	; (8001038 <__sflush_r+0x100>)
 8000f94:	40ca      	lsrs	r2, r1
 8000f96:	07d6      	lsls	r6, r2, #31
 8000f98:	d528      	bpl.n	8000fec <__sflush_r+0xb4>
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	6062      	str	r2, [r4, #4]
 8000f9e:	04d9      	lsls	r1, r3, #19
 8000fa0:	6922      	ldr	r2, [r4, #16]
 8000fa2:	6022      	str	r2, [r4, #0]
 8000fa4:	d504      	bpl.n	8000fb0 <__sflush_r+0x78>
 8000fa6:	1c42      	adds	r2, r0, #1
 8000fa8:	d101      	bne.n	8000fae <__sflush_r+0x76>
 8000faa:	682b      	ldr	r3, [r5, #0]
 8000fac:	b903      	cbnz	r3, 8000fb0 <__sflush_r+0x78>
 8000fae:	6560      	str	r0, [r4, #84]	; 0x54
 8000fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fb2:	602f      	str	r7, [r5, #0]
 8000fb4:	2900      	cmp	r1, #0
 8000fb6:	d0cb      	beq.n	8000f50 <__sflush_r+0x18>
 8000fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	d002      	beq.n	8000fc6 <__sflush_r+0x8e>
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f000 f9d5 	bl	8001370 <_free_r>
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8000fca:	e7c2      	b.n	8000f52 <__sflush_r+0x1a>
 8000fcc:	6a21      	ldr	r1, [r4, #32]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	47b0      	blx	r6
 8000fd4:	1c41      	adds	r1, r0, #1
 8000fd6:	d1c7      	bne.n	8000f68 <__sflush_r+0x30>
 8000fd8:	682b      	ldr	r3, [r5, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0c4      	beq.n	8000f68 <__sflush_r+0x30>
 8000fde:	2b1d      	cmp	r3, #29
 8000fe0:	d001      	beq.n	8000fe6 <__sflush_r+0xae>
 8000fe2:	2b16      	cmp	r3, #22
 8000fe4:	d101      	bne.n	8000fea <__sflush_r+0xb2>
 8000fe6:	602f      	str	r7, [r5, #0]
 8000fe8:	e7b2      	b.n	8000f50 <__sflush_r+0x18>
 8000fea:	89a3      	ldrh	r3, [r4, #12]
 8000fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff0:	81a3      	strh	r3, [r4, #12]
 8000ff2:	e7ae      	b.n	8000f52 <__sflush_r+0x1a>
 8000ff4:	690f      	ldr	r7, [r1, #16]
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d0aa      	beq.n	8000f50 <__sflush_r+0x18>
 8000ffa:	0793      	lsls	r3, r2, #30
 8000ffc:	680e      	ldr	r6, [r1, #0]
 8000ffe:	bf08      	it	eq
 8001000:	694b      	ldreq	r3, [r1, #20]
 8001002:	600f      	str	r7, [r1, #0]
 8001004:	bf18      	it	ne
 8001006:	2300      	movne	r3, #0
 8001008:	1bf6      	subs	r6, r6, r7
 800100a:	608b      	str	r3, [r1, #8]
 800100c:	2e00      	cmp	r6, #0
 800100e:	dd9f      	ble.n	8000f50 <__sflush_r+0x18>
 8001010:	6a21      	ldr	r1, [r4, #32]
 8001012:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001016:	4633      	mov	r3, r6
 8001018:	463a      	mov	r2, r7
 800101a:	4628      	mov	r0, r5
 800101c:	47e0      	blx	ip
 800101e:	2800      	cmp	r0, #0
 8001020:	dc06      	bgt.n	8001030 <__sflush_r+0xf8>
 8001022:	89a3      	ldrh	r3, [r4, #12]
 8001024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001028:	81a3      	strh	r3, [r4, #12]
 800102a:	f04f 30ff 	mov.w	r0, #4294967295
 800102e:	e790      	b.n	8000f52 <__sflush_r+0x1a>
 8001030:	4407      	add	r7, r0
 8001032:	1a36      	subs	r6, r6, r0
 8001034:	e7ea      	b.n	800100c <__sflush_r+0xd4>
 8001036:	bf00      	nop
 8001038:	20400001 	.word	0x20400001

0800103c <_fflush_r>:
 800103c:	b538      	push	{r3, r4, r5, lr}
 800103e:	690b      	ldr	r3, [r1, #16]
 8001040:	4605      	mov	r5, r0
 8001042:	460c      	mov	r4, r1
 8001044:	b913      	cbnz	r3, 800104c <_fflush_r+0x10>
 8001046:	2500      	movs	r5, #0
 8001048:	4628      	mov	r0, r5
 800104a:	bd38      	pop	{r3, r4, r5, pc}
 800104c:	b118      	cbz	r0, 8001056 <_fflush_r+0x1a>
 800104e:	6983      	ldr	r3, [r0, #24]
 8001050:	b90b      	cbnz	r3, 8001056 <_fflush_r+0x1a>
 8001052:	f000 f887 	bl	8001164 <__sinit>
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <_fflush_r+0x6c>)
 8001058:	429c      	cmp	r4, r3
 800105a:	d11b      	bne.n	8001094 <_fflush_r+0x58>
 800105c:	686c      	ldr	r4, [r5, #4]
 800105e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0ef      	beq.n	8001046 <_fflush_r+0xa>
 8001066:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001068:	07d0      	lsls	r0, r2, #31
 800106a:	d404      	bmi.n	8001076 <_fflush_r+0x3a>
 800106c:	0599      	lsls	r1, r3, #22
 800106e:	d402      	bmi.n	8001076 <_fflush_r+0x3a>
 8001070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001072:	f000 f915 	bl	80012a0 <__retarget_lock_acquire_recursive>
 8001076:	4628      	mov	r0, r5
 8001078:	4621      	mov	r1, r4
 800107a:	f7ff ff5d 	bl	8000f38 <__sflush_r>
 800107e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001080:	07da      	lsls	r2, r3, #31
 8001082:	4605      	mov	r5, r0
 8001084:	d4e0      	bmi.n	8001048 <_fflush_r+0xc>
 8001086:	89a3      	ldrh	r3, [r4, #12]
 8001088:	059b      	lsls	r3, r3, #22
 800108a:	d4dd      	bmi.n	8001048 <_fflush_r+0xc>
 800108c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800108e:	f000 f908 	bl	80012a2 <__retarget_lock_release_recursive>
 8001092:	e7d9      	b.n	8001048 <_fflush_r+0xc>
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <_fflush_r+0x70>)
 8001096:	429c      	cmp	r4, r3
 8001098:	d101      	bne.n	800109e <_fflush_r+0x62>
 800109a:	68ac      	ldr	r4, [r5, #8]
 800109c:	e7df      	b.n	800105e <_fflush_r+0x22>
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <_fflush_r+0x74>)
 80010a0:	429c      	cmp	r4, r3
 80010a2:	bf08      	it	eq
 80010a4:	68ec      	ldreq	r4, [r5, #12]
 80010a6:	e7da      	b.n	800105e <_fflush_r+0x22>
 80010a8:	08001d94 	.word	0x08001d94
 80010ac:	08001db4 	.word	0x08001db4
 80010b0:	08001d74 	.word	0x08001d74

080010b4 <std>:
 80010b4:	2300      	movs	r3, #0
 80010b6:	b510      	push	{r4, lr}
 80010b8:	4604      	mov	r4, r0
 80010ba:	e9c0 3300 	strd	r3, r3, [r0]
 80010be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80010c2:	6083      	str	r3, [r0, #8]
 80010c4:	8181      	strh	r1, [r0, #12]
 80010c6:	6643      	str	r3, [r0, #100]	; 0x64
 80010c8:	81c2      	strh	r2, [r0, #14]
 80010ca:	6183      	str	r3, [r0, #24]
 80010cc:	4619      	mov	r1, r3
 80010ce:	2208      	movs	r2, #8
 80010d0:	305c      	adds	r0, #92	; 0x5c
 80010d2:	f7ff fddb 	bl	8000c8c <memset>
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <std+0x38>)
 80010d8:	6263      	str	r3, [r4, #36]	; 0x24
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <std+0x3c>)
 80010dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <std+0x40>)
 80010e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <std+0x44>)
 80010e4:	6224      	str	r4, [r4, #32]
 80010e6:	6323      	str	r3, [r4, #48]	; 0x30
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	bf00      	nop
 80010ec:	08001b25 	.word	0x08001b25
 80010f0:	08001b47 	.word	0x08001b47
 80010f4:	08001b7f 	.word	0x08001b7f
 80010f8:	08001ba3 	.word	0x08001ba3

080010fc <_cleanup_r>:
 80010fc:	4901      	ldr	r1, [pc, #4]	; (8001104 <_cleanup_r+0x8>)
 80010fe:	f000 b8af 	b.w	8001260 <_fwalk_reent>
 8001102:	bf00      	nop
 8001104:	0800103d 	.word	0x0800103d

08001108 <__sfmoreglue>:
 8001108:	b570      	push	{r4, r5, r6, lr}
 800110a:	2268      	movs	r2, #104	; 0x68
 800110c:	1e4d      	subs	r5, r1, #1
 800110e:	4355      	muls	r5, r2
 8001110:	460e      	mov	r6, r1
 8001112:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001116:	f000 f995 	bl	8001444 <_malloc_r>
 800111a:	4604      	mov	r4, r0
 800111c:	b140      	cbz	r0, 8001130 <__sfmoreglue+0x28>
 800111e:	2100      	movs	r1, #0
 8001120:	e9c0 1600 	strd	r1, r6, [r0]
 8001124:	300c      	adds	r0, #12
 8001126:	60a0      	str	r0, [r4, #8]
 8001128:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800112c:	f7ff fdae 	bl	8000c8c <memset>
 8001130:	4620      	mov	r0, r4
 8001132:	bd70      	pop	{r4, r5, r6, pc}

08001134 <__sfp_lock_acquire>:
 8001134:	4801      	ldr	r0, [pc, #4]	; (800113c <__sfp_lock_acquire+0x8>)
 8001136:	f000 b8b3 	b.w	80012a0 <__retarget_lock_acquire_recursive>
 800113a:	bf00      	nop
 800113c:	20000139 	.word	0x20000139

08001140 <__sfp_lock_release>:
 8001140:	4801      	ldr	r0, [pc, #4]	; (8001148 <__sfp_lock_release+0x8>)
 8001142:	f000 b8ae 	b.w	80012a2 <__retarget_lock_release_recursive>
 8001146:	bf00      	nop
 8001148:	20000139 	.word	0x20000139

0800114c <__sinit_lock_acquire>:
 800114c:	4801      	ldr	r0, [pc, #4]	; (8001154 <__sinit_lock_acquire+0x8>)
 800114e:	f000 b8a7 	b.w	80012a0 <__retarget_lock_acquire_recursive>
 8001152:	bf00      	nop
 8001154:	2000013a 	.word	0x2000013a

08001158 <__sinit_lock_release>:
 8001158:	4801      	ldr	r0, [pc, #4]	; (8001160 <__sinit_lock_release+0x8>)
 800115a:	f000 b8a2 	b.w	80012a2 <__retarget_lock_release_recursive>
 800115e:	bf00      	nop
 8001160:	2000013a 	.word	0x2000013a

08001164 <__sinit>:
 8001164:	b510      	push	{r4, lr}
 8001166:	4604      	mov	r4, r0
 8001168:	f7ff fff0 	bl	800114c <__sinit_lock_acquire>
 800116c:	69a3      	ldr	r3, [r4, #24]
 800116e:	b11b      	cbz	r3, 8001178 <__sinit+0x14>
 8001170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001174:	f7ff bff0 	b.w	8001158 <__sinit_lock_release>
 8001178:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800117c:	6523      	str	r3, [r4, #80]	; 0x50
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <__sinit+0x68>)
 8001180:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <__sinit+0x6c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	62a2      	str	r2, [r4, #40]	; 0x28
 8001186:	42a3      	cmp	r3, r4
 8001188:	bf04      	itt	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	61a3      	streq	r3, [r4, #24]
 800118e:	4620      	mov	r0, r4
 8001190:	f000 f820 	bl	80011d4 <__sfp>
 8001194:	6060      	str	r0, [r4, #4]
 8001196:	4620      	mov	r0, r4
 8001198:	f000 f81c 	bl	80011d4 <__sfp>
 800119c:	60a0      	str	r0, [r4, #8]
 800119e:	4620      	mov	r0, r4
 80011a0:	f000 f818 	bl	80011d4 <__sfp>
 80011a4:	2200      	movs	r2, #0
 80011a6:	60e0      	str	r0, [r4, #12]
 80011a8:	2104      	movs	r1, #4
 80011aa:	6860      	ldr	r0, [r4, #4]
 80011ac:	f7ff ff82 	bl	80010b4 <std>
 80011b0:	68a0      	ldr	r0, [r4, #8]
 80011b2:	2201      	movs	r2, #1
 80011b4:	2109      	movs	r1, #9
 80011b6:	f7ff ff7d 	bl	80010b4 <std>
 80011ba:	68e0      	ldr	r0, [r4, #12]
 80011bc:	2202      	movs	r2, #2
 80011be:	2112      	movs	r1, #18
 80011c0:	f7ff ff78 	bl	80010b4 <std>
 80011c4:	2301      	movs	r3, #1
 80011c6:	61a3      	str	r3, [r4, #24]
 80011c8:	e7d2      	b.n	8001170 <__sinit+0xc>
 80011ca:	bf00      	nop
 80011cc:	08001d70 	.word	0x08001d70
 80011d0:	080010fd 	.word	0x080010fd

080011d4 <__sfp>:
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d6:	4607      	mov	r7, r0
 80011d8:	f7ff ffac 	bl	8001134 <__sfp_lock_acquire>
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <__sfp+0x84>)
 80011de:	681e      	ldr	r6, [r3, #0]
 80011e0:	69b3      	ldr	r3, [r6, #24]
 80011e2:	b913      	cbnz	r3, 80011ea <__sfp+0x16>
 80011e4:	4630      	mov	r0, r6
 80011e6:	f7ff ffbd 	bl	8001164 <__sinit>
 80011ea:	3648      	adds	r6, #72	; 0x48
 80011ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	d503      	bpl.n	80011fc <__sfp+0x28>
 80011f4:	6833      	ldr	r3, [r6, #0]
 80011f6:	b30b      	cbz	r3, 800123c <__sfp+0x68>
 80011f8:	6836      	ldr	r6, [r6, #0]
 80011fa:	e7f7      	b.n	80011ec <__sfp+0x18>
 80011fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001200:	b9d5      	cbnz	r5, 8001238 <__sfp+0x64>
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <__sfp+0x88>)
 8001204:	60e3      	str	r3, [r4, #12]
 8001206:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800120a:	6665      	str	r5, [r4, #100]	; 0x64
 800120c:	f000 f847 	bl	800129e <__retarget_lock_init_recursive>
 8001210:	f7ff ff96 	bl	8001140 <__sfp_lock_release>
 8001214:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001218:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800121c:	6025      	str	r5, [r4, #0]
 800121e:	61a5      	str	r5, [r4, #24]
 8001220:	2208      	movs	r2, #8
 8001222:	4629      	mov	r1, r5
 8001224:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001228:	f7ff fd30 	bl	8000c8c <memset>
 800122c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001230:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001234:	4620      	mov	r0, r4
 8001236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001238:	3468      	adds	r4, #104	; 0x68
 800123a:	e7d9      	b.n	80011f0 <__sfp+0x1c>
 800123c:	2104      	movs	r1, #4
 800123e:	4638      	mov	r0, r7
 8001240:	f7ff ff62 	bl	8001108 <__sfmoreglue>
 8001244:	4604      	mov	r4, r0
 8001246:	6030      	str	r0, [r6, #0]
 8001248:	2800      	cmp	r0, #0
 800124a:	d1d5      	bne.n	80011f8 <__sfp+0x24>
 800124c:	f7ff ff78 	bl	8001140 <__sfp_lock_release>
 8001250:	230c      	movs	r3, #12
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	e7ee      	b.n	8001234 <__sfp+0x60>
 8001256:	bf00      	nop
 8001258:	08001d70 	.word	0x08001d70
 800125c:	ffff0001 	.word	0xffff0001

08001260 <_fwalk_reent>:
 8001260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001264:	4606      	mov	r6, r0
 8001266:	4688      	mov	r8, r1
 8001268:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800126c:	2700      	movs	r7, #0
 800126e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001272:	f1b9 0901 	subs.w	r9, r9, #1
 8001276:	d505      	bpl.n	8001284 <_fwalk_reent+0x24>
 8001278:	6824      	ldr	r4, [r4, #0]
 800127a:	2c00      	cmp	r4, #0
 800127c:	d1f7      	bne.n	800126e <_fwalk_reent+0xe>
 800127e:	4638      	mov	r0, r7
 8001280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001284:	89ab      	ldrh	r3, [r5, #12]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d907      	bls.n	800129a <_fwalk_reent+0x3a>
 800128a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800128e:	3301      	adds	r3, #1
 8001290:	d003      	beq.n	800129a <_fwalk_reent+0x3a>
 8001292:	4629      	mov	r1, r5
 8001294:	4630      	mov	r0, r6
 8001296:	47c0      	blx	r8
 8001298:	4307      	orrs	r7, r0
 800129a:	3568      	adds	r5, #104	; 0x68
 800129c:	e7e9      	b.n	8001272 <_fwalk_reent+0x12>

0800129e <__retarget_lock_init_recursive>:
 800129e:	4770      	bx	lr

080012a0 <__retarget_lock_acquire_recursive>:
 80012a0:	4770      	bx	lr

080012a2 <__retarget_lock_release_recursive>:
 80012a2:	4770      	bx	lr

080012a4 <__swhatbuf_r>:
 80012a4:	b570      	push	{r4, r5, r6, lr}
 80012a6:	460e      	mov	r6, r1
 80012a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ac:	2900      	cmp	r1, #0
 80012ae:	b096      	sub	sp, #88	; 0x58
 80012b0:	4614      	mov	r4, r2
 80012b2:	461d      	mov	r5, r3
 80012b4:	da08      	bge.n	80012c8 <__swhatbuf_r+0x24>
 80012b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	602a      	str	r2, [r5, #0]
 80012be:	061a      	lsls	r2, r3, #24
 80012c0:	d410      	bmi.n	80012e4 <__swhatbuf_r+0x40>
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	e00e      	b.n	80012e6 <__swhatbuf_r+0x42>
 80012c8:	466a      	mov	r2, sp
 80012ca:	f000 fc91 	bl	8001bf0 <_fstat_r>
 80012ce:	2800      	cmp	r0, #0
 80012d0:	dbf1      	blt.n	80012b6 <__swhatbuf_r+0x12>
 80012d2:	9a01      	ldr	r2, [sp, #4]
 80012d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80012d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80012dc:	425a      	negs	r2, r3
 80012de:	415a      	adcs	r2, r3
 80012e0:	602a      	str	r2, [r5, #0]
 80012e2:	e7ee      	b.n	80012c2 <__swhatbuf_r+0x1e>
 80012e4:	2340      	movs	r3, #64	; 0x40
 80012e6:	2000      	movs	r0, #0
 80012e8:	6023      	str	r3, [r4, #0]
 80012ea:	b016      	add	sp, #88	; 0x58
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080012f0 <__smakebuf_r>:
 80012f0:	898b      	ldrh	r3, [r1, #12]
 80012f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012f4:	079d      	lsls	r5, r3, #30
 80012f6:	4606      	mov	r6, r0
 80012f8:	460c      	mov	r4, r1
 80012fa:	d507      	bpl.n	800130c <__smakebuf_r+0x1c>
 80012fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001300:	6023      	str	r3, [r4, #0]
 8001302:	6123      	str	r3, [r4, #16]
 8001304:	2301      	movs	r3, #1
 8001306:	6163      	str	r3, [r4, #20]
 8001308:	b002      	add	sp, #8
 800130a:	bd70      	pop	{r4, r5, r6, pc}
 800130c:	ab01      	add	r3, sp, #4
 800130e:	466a      	mov	r2, sp
 8001310:	f7ff ffc8 	bl	80012a4 <__swhatbuf_r>
 8001314:	9900      	ldr	r1, [sp, #0]
 8001316:	4605      	mov	r5, r0
 8001318:	4630      	mov	r0, r6
 800131a:	f000 f893 	bl	8001444 <_malloc_r>
 800131e:	b948      	cbnz	r0, 8001334 <__smakebuf_r+0x44>
 8001320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001324:	059a      	lsls	r2, r3, #22
 8001326:	d4ef      	bmi.n	8001308 <__smakebuf_r+0x18>
 8001328:	f023 0303 	bic.w	r3, r3, #3
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	81a3      	strh	r3, [r4, #12]
 8001332:	e7e3      	b.n	80012fc <__smakebuf_r+0xc>
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <__smakebuf_r+0x7c>)
 8001336:	62b3      	str	r3, [r6, #40]	; 0x28
 8001338:	89a3      	ldrh	r3, [r4, #12]
 800133a:	6020      	str	r0, [r4, #0]
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	81a3      	strh	r3, [r4, #12]
 8001342:	9b00      	ldr	r3, [sp, #0]
 8001344:	6163      	str	r3, [r4, #20]
 8001346:	9b01      	ldr	r3, [sp, #4]
 8001348:	6120      	str	r0, [r4, #16]
 800134a:	b15b      	cbz	r3, 8001364 <__smakebuf_r+0x74>
 800134c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001350:	4630      	mov	r0, r6
 8001352:	f000 fc5f 	bl	8001c14 <_isatty_r>
 8001356:	b128      	cbz	r0, 8001364 <__smakebuf_r+0x74>
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	f023 0303 	bic.w	r3, r3, #3
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	81a3      	strh	r3, [r4, #12]
 8001364:	89a0      	ldrh	r0, [r4, #12]
 8001366:	4305      	orrs	r5, r0
 8001368:	81a5      	strh	r5, [r4, #12]
 800136a:	e7cd      	b.n	8001308 <__smakebuf_r+0x18>
 800136c:	080010fd 	.word	0x080010fd

08001370 <_free_r>:
 8001370:	b538      	push	{r3, r4, r5, lr}
 8001372:	4605      	mov	r5, r0
 8001374:	2900      	cmp	r1, #0
 8001376:	d041      	beq.n	80013fc <_free_r+0x8c>
 8001378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800137c:	1f0c      	subs	r4, r1, #4
 800137e:	2b00      	cmp	r3, #0
 8001380:	bfb8      	it	lt
 8001382:	18e4      	addlt	r4, r4, r3
 8001384:	f000 fc68 	bl	8001c58 <__malloc_lock>
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <_free_r+0x90>)
 800138a:	6813      	ldr	r3, [r2, #0]
 800138c:	b933      	cbnz	r3, 800139c <_free_r+0x2c>
 800138e:	6063      	str	r3, [r4, #4]
 8001390:	6014      	str	r4, [r2, #0]
 8001392:	4628      	mov	r0, r5
 8001394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001398:	f000 bc64 	b.w	8001c64 <__malloc_unlock>
 800139c:	42a3      	cmp	r3, r4
 800139e:	d908      	bls.n	80013b2 <_free_r+0x42>
 80013a0:	6820      	ldr	r0, [r4, #0]
 80013a2:	1821      	adds	r1, r4, r0
 80013a4:	428b      	cmp	r3, r1
 80013a6:	bf01      	itttt	eq
 80013a8:	6819      	ldreq	r1, [r3, #0]
 80013aa:	685b      	ldreq	r3, [r3, #4]
 80013ac:	1809      	addeq	r1, r1, r0
 80013ae:	6021      	streq	r1, [r4, #0]
 80013b0:	e7ed      	b.n	800138e <_free_r+0x1e>
 80013b2:	461a      	mov	r2, r3
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	b10b      	cbz	r3, 80013bc <_free_r+0x4c>
 80013b8:	42a3      	cmp	r3, r4
 80013ba:	d9fa      	bls.n	80013b2 <_free_r+0x42>
 80013bc:	6811      	ldr	r1, [r2, #0]
 80013be:	1850      	adds	r0, r2, r1
 80013c0:	42a0      	cmp	r0, r4
 80013c2:	d10b      	bne.n	80013dc <_free_r+0x6c>
 80013c4:	6820      	ldr	r0, [r4, #0]
 80013c6:	4401      	add	r1, r0
 80013c8:	1850      	adds	r0, r2, r1
 80013ca:	4283      	cmp	r3, r0
 80013cc:	6011      	str	r1, [r2, #0]
 80013ce:	d1e0      	bne.n	8001392 <_free_r+0x22>
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	6053      	str	r3, [r2, #4]
 80013d6:	4401      	add	r1, r0
 80013d8:	6011      	str	r1, [r2, #0]
 80013da:	e7da      	b.n	8001392 <_free_r+0x22>
 80013dc:	d902      	bls.n	80013e4 <_free_r+0x74>
 80013de:	230c      	movs	r3, #12
 80013e0:	602b      	str	r3, [r5, #0]
 80013e2:	e7d6      	b.n	8001392 <_free_r+0x22>
 80013e4:	6820      	ldr	r0, [r4, #0]
 80013e6:	1821      	adds	r1, r4, r0
 80013e8:	428b      	cmp	r3, r1
 80013ea:	bf04      	itt	eq
 80013ec:	6819      	ldreq	r1, [r3, #0]
 80013ee:	685b      	ldreq	r3, [r3, #4]
 80013f0:	6063      	str	r3, [r4, #4]
 80013f2:	bf04      	itt	eq
 80013f4:	1809      	addeq	r1, r1, r0
 80013f6:	6021      	streq	r1, [r4, #0]
 80013f8:	6054      	str	r4, [r2, #4]
 80013fa:	e7ca      	b.n	8001392 <_free_r+0x22>
 80013fc:	bd38      	pop	{r3, r4, r5, pc}
 80013fe:	bf00      	nop
 8001400:	2000013c 	.word	0x2000013c

08001404 <sbrk_aligned>:
 8001404:	b570      	push	{r4, r5, r6, lr}
 8001406:	4e0e      	ldr	r6, [pc, #56]	; (8001440 <sbrk_aligned+0x3c>)
 8001408:	460c      	mov	r4, r1
 800140a:	6831      	ldr	r1, [r6, #0]
 800140c:	4605      	mov	r5, r0
 800140e:	b911      	cbnz	r1, 8001416 <sbrk_aligned+0x12>
 8001410:	f000 fb78 	bl	8001b04 <_sbrk_r>
 8001414:	6030      	str	r0, [r6, #0]
 8001416:	4621      	mov	r1, r4
 8001418:	4628      	mov	r0, r5
 800141a:	f000 fb73 	bl	8001b04 <_sbrk_r>
 800141e:	1c43      	adds	r3, r0, #1
 8001420:	d00a      	beq.n	8001438 <sbrk_aligned+0x34>
 8001422:	1cc4      	adds	r4, r0, #3
 8001424:	f024 0403 	bic.w	r4, r4, #3
 8001428:	42a0      	cmp	r0, r4
 800142a:	d007      	beq.n	800143c <sbrk_aligned+0x38>
 800142c:	1a21      	subs	r1, r4, r0
 800142e:	4628      	mov	r0, r5
 8001430:	f000 fb68 	bl	8001b04 <_sbrk_r>
 8001434:	3001      	adds	r0, #1
 8001436:	d101      	bne.n	800143c <sbrk_aligned+0x38>
 8001438:	f04f 34ff 	mov.w	r4, #4294967295
 800143c:	4620      	mov	r0, r4
 800143e:	bd70      	pop	{r4, r5, r6, pc}
 8001440:	20000140 	.word	0x20000140

08001444 <_malloc_r>:
 8001444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001448:	1ccd      	adds	r5, r1, #3
 800144a:	f025 0503 	bic.w	r5, r5, #3
 800144e:	3508      	adds	r5, #8
 8001450:	2d0c      	cmp	r5, #12
 8001452:	bf38      	it	cc
 8001454:	250c      	movcc	r5, #12
 8001456:	2d00      	cmp	r5, #0
 8001458:	4607      	mov	r7, r0
 800145a:	db01      	blt.n	8001460 <_malloc_r+0x1c>
 800145c:	42a9      	cmp	r1, r5
 800145e:	d905      	bls.n	800146c <_malloc_r+0x28>
 8001460:	230c      	movs	r3, #12
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	2600      	movs	r6, #0
 8001466:	4630      	mov	r0, r6
 8001468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800146c:	4e2e      	ldr	r6, [pc, #184]	; (8001528 <_malloc_r+0xe4>)
 800146e:	f000 fbf3 	bl	8001c58 <__malloc_lock>
 8001472:	6833      	ldr	r3, [r6, #0]
 8001474:	461c      	mov	r4, r3
 8001476:	bb34      	cbnz	r4, 80014c6 <_malloc_r+0x82>
 8001478:	4629      	mov	r1, r5
 800147a:	4638      	mov	r0, r7
 800147c:	f7ff ffc2 	bl	8001404 <sbrk_aligned>
 8001480:	1c43      	adds	r3, r0, #1
 8001482:	4604      	mov	r4, r0
 8001484:	d14d      	bne.n	8001522 <_malloc_r+0xde>
 8001486:	6834      	ldr	r4, [r6, #0]
 8001488:	4626      	mov	r6, r4
 800148a:	2e00      	cmp	r6, #0
 800148c:	d140      	bne.n	8001510 <_malloc_r+0xcc>
 800148e:	6823      	ldr	r3, [r4, #0]
 8001490:	4631      	mov	r1, r6
 8001492:	4638      	mov	r0, r7
 8001494:	eb04 0803 	add.w	r8, r4, r3
 8001498:	f000 fb34 	bl	8001b04 <_sbrk_r>
 800149c:	4580      	cmp	r8, r0
 800149e:	d13a      	bne.n	8001516 <_malloc_r+0xd2>
 80014a0:	6821      	ldr	r1, [r4, #0]
 80014a2:	3503      	adds	r5, #3
 80014a4:	1a6d      	subs	r5, r5, r1
 80014a6:	f025 0503 	bic.w	r5, r5, #3
 80014aa:	3508      	adds	r5, #8
 80014ac:	2d0c      	cmp	r5, #12
 80014ae:	bf38      	it	cc
 80014b0:	250c      	movcc	r5, #12
 80014b2:	4629      	mov	r1, r5
 80014b4:	4638      	mov	r0, r7
 80014b6:	f7ff ffa5 	bl	8001404 <sbrk_aligned>
 80014ba:	3001      	adds	r0, #1
 80014bc:	d02b      	beq.n	8001516 <_malloc_r+0xd2>
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	442b      	add	r3, r5
 80014c2:	6023      	str	r3, [r4, #0]
 80014c4:	e00e      	b.n	80014e4 <_malloc_r+0xa0>
 80014c6:	6822      	ldr	r2, [r4, #0]
 80014c8:	1b52      	subs	r2, r2, r5
 80014ca:	d41e      	bmi.n	800150a <_malloc_r+0xc6>
 80014cc:	2a0b      	cmp	r2, #11
 80014ce:	d916      	bls.n	80014fe <_malloc_r+0xba>
 80014d0:	1961      	adds	r1, r4, r5
 80014d2:	42a3      	cmp	r3, r4
 80014d4:	6025      	str	r5, [r4, #0]
 80014d6:	bf18      	it	ne
 80014d8:	6059      	strne	r1, [r3, #4]
 80014da:	6863      	ldr	r3, [r4, #4]
 80014dc:	bf08      	it	eq
 80014de:	6031      	streq	r1, [r6, #0]
 80014e0:	5162      	str	r2, [r4, r5]
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	4638      	mov	r0, r7
 80014e6:	f104 060b 	add.w	r6, r4, #11
 80014ea:	f000 fbbb 	bl	8001c64 <__malloc_unlock>
 80014ee:	f026 0607 	bic.w	r6, r6, #7
 80014f2:	1d23      	adds	r3, r4, #4
 80014f4:	1af2      	subs	r2, r6, r3
 80014f6:	d0b6      	beq.n	8001466 <_malloc_r+0x22>
 80014f8:	1b9b      	subs	r3, r3, r6
 80014fa:	50a3      	str	r3, [r4, r2]
 80014fc:	e7b3      	b.n	8001466 <_malloc_r+0x22>
 80014fe:	6862      	ldr	r2, [r4, #4]
 8001500:	42a3      	cmp	r3, r4
 8001502:	bf0c      	ite	eq
 8001504:	6032      	streq	r2, [r6, #0]
 8001506:	605a      	strne	r2, [r3, #4]
 8001508:	e7ec      	b.n	80014e4 <_malloc_r+0xa0>
 800150a:	4623      	mov	r3, r4
 800150c:	6864      	ldr	r4, [r4, #4]
 800150e:	e7b2      	b.n	8001476 <_malloc_r+0x32>
 8001510:	4634      	mov	r4, r6
 8001512:	6876      	ldr	r6, [r6, #4]
 8001514:	e7b9      	b.n	800148a <_malloc_r+0x46>
 8001516:	230c      	movs	r3, #12
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4638      	mov	r0, r7
 800151c:	f000 fba2 	bl	8001c64 <__malloc_unlock>
 8001520:	e7a1      	b.n	8001466 <_malloc_r+0x22>
 8001522:	6025      	str	r5, [r4, #0]
 8001524:	e7de      	b.n	80014e4 <_malloc_r+0xa0>
 8001526:	bf00      	nop
 8001528:	2000013c 	.word	0x2000013c

0800152c <__sfputc_r>:
 800152c:	6893      	ldr	r3, [r2, #8]
 800152e:	3b01      	subs	r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	b410      	push	{r4}
 8001534:	6093      	str	r3, [r2, #8]
 8001536:	da07      	bge.n	8001548 <__sfputc_r+0x1c>
 8001538:	6994      	ldr	r4, [r2, #24]
 800153a:	42a3      	cmp	r3, r4
 800153c:	db01      	blt.n	8001542 <__sfputc_r+0x16>
 800153e:	290a      	cmp	r1, #10
 8001540:	d102      	bne.n	8001548 <__sfputc_r+0x1c>
 8001542:	bc10      	pop	{r4}
 8001544:	f7ff bc38 	b.w	8000db8 <__swbuf_r>
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	1c58      	adds	r0, r3, #1
 800154c:	6010      	str	r0, [r2, #0]
 800154e:	7019      	strb	r1, [r3, #0]
 8001550:	4608      	mov	r0, r1
 8001552:	bc10      	pop	{r4}
 8001554:	4770      	bx	lr

08001556 <__sfputs_r>:
 8001556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001558:	4606      	mov	r6, r0
 800155a:	460f      	mov	r7, r1
 800155c:	4614      	mov	r4, r2
 800155e:	18d5      	adds	r5, r2, r3
 8001560:	42ac      	cmp	r4, r5
 8001562:	d101      	bne.n	8001568 <__sfputs_r+0x12>
 8001564:	2000      	movs	r0, #0
 8001566:	e007      	b.n	8001578 <__sfputs_r+0x22>
 8001568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800156c:	463a      	mov	r2, r7
 800156e:	4630      	mov	r0, r6
 8001570:	f7ff ffdc 	bl	800152c <__sfputc_r>
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	d1f3      	bne.n	8001560 <__sfputs_r+0xa>
 8001578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800157c <_vfiprintf_r>:
 800157c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001580:	460d      	mov	r5, r1
 8001582:	b09d      	sub	sp, #116	; 0x74
 8001584:	4614      	mov	r4, r2
 8001586:	4698      	mov	r8, r3
 8001588:	4606      	mov	r6, r0
 800158a:	b118      	cbz	r0, 8001594 <_vfiprintf_r+0x18>
 800158c:	6983      	ldr	r3, [r0, #24]
 800158e:	b90b      	cbnz	r3, 8001594 <_vfiprintf_r+0x18>
 8001590:	f7ff fde8 	bl	8001164 <__sinit>
 8001594:	4b89      	ldr	r3, [pc, #548]	; (80017bc <_vfiprintf_r+0x240>)
 8001596:	429d      	cmp	r5, r3
 8001598:	d11b      	bne.n	80015d2 <_vfiprintf_r+0x56>
 800159a:	6875      	ldr	r5, [r6, #4]
 800159c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800159e:	07d9      	lsls	r1, r3, #31
 80015a0:	d405      	bmi.n	80015ae <_vfiprintf_r+0x32>
 80015a2:	89ab      	ldrh	r3, [r5, #12]
 80015a4:	059a      	lsls	r2, r3, #22
 80015a6:	d402      	bmi.n	80015ae <_vfiprintf_r+0x32>
 80015a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015aa:	f7ff fe79 	bl	80012a0 <__retarget_lock_acquire_recursive>
 80015ae:	89ab      	ldrh	r3, [r5, #12]
 80015b0:	071b      	lsls	r3, r3, #28
 80015b2:	d501      	bpl.n	80015b8 <_vfiprintf_r+0x3c>
 80015b4:	692b      	ldr	r3, [r5, #16]
 80015b6:	b9eb      	cbnz	r3, 80015f4 <_vfiprintf_r+0x78>
 80015b8:	4629      	mov	r1, r5
 80015ba:	4630      	mov	r0, r6
 80015bc:	f7ff fc4e 	bl	8000e5c <__swsetup_r>
 80015c0:	b1c0      	cbz	r0, 80015f4 <_vfiprintf_r+0x78>
 80015c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80015c4:	07dc      	lsls	r4, r3, #31
 80015c6:	d50e      	bpl.n	80015e6 <_vfiprintf_r+0x6a>
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	b01d      	add	sp, #116	; 0x74
 80015ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015d2:	4b7b      	ldr	r3, [pc, #492]	; (80017c0 <_vfiprintf_r+0x244>)
 80015d4:	429d      	cmp	r5, r3
 80015d6:	d101      	bne.n	80015dc <_vfiprintf_r+0x60>
 80015d8:	68b5      	ldr	r5, [r6, #8]
 80015da:	e7df      	b.n	800159c <_vfiprintf_r+0x20>
 80015dc:	4b79      	ldr	r3, [pc, #484]	; (80017c4 <_vfiprintf_r+0x248>)
 80015de:	429d      	cmp	r5, r3
 80015e0:	bf08      	it	eq
 80015e2:	68f5      	ldreq	r5, [r6, #12]
 80015e4:	e7da      	b.n	800159c <_vfiprintf_r+0x20>
 80015e6:	89ab      	ldrh	r3, [r5, #12]
 80015e8:	0598      	lsls	r0, r3, #22
 80015ea:	d4ed      	bmi.n	80015c8 <_vfiprintf_r+0x4c>
 80015ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015ee:	f7ff fe58 	bl	80012a2 <__retarget_lock_release_recursive>
 80015f2:	e7e9      	b.n	80015c8 <_vfiprintf_r+0x4c>
 80015f4:	2300      	movs	r3, #0
 80015f6:	9309      	str	r3, [sp, #36]	; 0x24
 80015f8:	2320      	movs	r3, #32
 80015fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80015fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8001602:	2330      	movs	r3, #48	; 0x30
 8001604:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80017c8 <_vfiprintf_r+0x24c>
 8001608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800160c:	f04f 0901 	mov.w	r9, #1
 8001610:	4623      	mov	r3, r4
 8001612:	469a      	mov	sl, r3
 8001614:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001618:	b10a      	cbz	r2, 800161e <_vfiprintf_r+0xa2>
 800161a:	2a25      	cmp	r2, #37	; 0x25
 800161c:	d1f9      	bne.n	8001612 <_vfiprintf_r+0x96>
 800161e:	ebba 0b04 	subs.w	fp, sl, r4
 8001622:	d00b      	beq.n	800163c <_vfiprintf_r+0xc0>
 8001624:	465b      	mov	r3, fp
 8001626:	4622      	mov	r2, r4
 8001628:	4629      	mov	r1, r5
 800162a:	4630      	mov	r0, r6
 800162c:	f7ff ff93 	bl	8001556 <__sfputs_r>
 8001630:	3001      	adds	r0, #1
 8001632:	f000 80aa 	beq.w	800178a <_vfiprintf_r+0x20e>
 8001636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001638:	445a      	add	r2, fp
 800163a:	9209      	str	r2, [sp, #36]	; 0x24
 800163c:	f89a 3000 	ldrb.w	r3, [sl]
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80a2 	beq.w	800178a <_vfiprintf_r+0x20e>
 8001646:	2300      	movs	r3, #0
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001650:	f10a 0a01 	add.w	sl, sl, #1
 8001654:	9304      	str	r3, [sp, #16]
 8001656:	9307      	str	r3, [sp, #28]
 8001658:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800165c:	931a      	str	r3, [sp, #104]	; 0x68
 800165e:	4654      	mov	r4, sl
 8001660:	2205      	movs	r2, #5
 8001662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001666:	4858      	ldr	r0, [pc, #352]	; (80017c8 <_vfiprintf_r+0x24c>)
 8001668:	f7fe fdc2 	bl	80001f0 <memchr>
 800166c:	9a04      	ldr	r2, [sp, #16]
 800166e:	b9d8      	cbnz	r0, 80016a8 <_vfiprintf_r+0x12c>
 8001670:	06d1      	lsls	r1, r2, #27
 8001672:	bf44      	itt	mi
 8001674:	2320      	movmi	r3, #32
 8001676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800167a:	0713      	lsls	r3, r2, #28
 800167c:	bf44      	itt	mi
 800167e:	232b      	movmi	r3, #43	; 0x2b
 8001680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001684:	f89a 3000 	ldrb.w	r3, [sl]
 8001688:	2b2a      	cmp	r3, #42	; 0x2a
 800168a:	d015      	beq.n	80016b8 <_vfiprintf_r+0x13c>
 800168c:	9a07      	ldr	r2, [sp, #28]
 800168e:	4654      	mov	r4, sl
 8001690:	2000      	movs	r0, #0
 8001692:	f04f 0c0a 	mov.w	ip, #10
 8001696:	4621      	mov	r1, r4
 8001698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800169c:	3b30      	subs	r3, #48	; 0x30
 800169e:	2b09      	cmp	r3, #9
 80016a0:	d94e      	bls.n	8001740 <_vfiprintf_r+0x1c4>
 80016a2:	b1b0      	cbz	r0, 80016d2 <_vfiprintf_r+0x156>
 80016a4:	9207      	str	r2, [sp, #28]
 80016a6:	e014      	b.n	80016d2 <_vfiprintf_r+0x156>
 80016a8:	eba0 0308 	sub.w	r3, r0, r8
 80016ac:	fa09 f303 	lsl.w	r3, r9, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	9304      	str	r3, [sp, #16]
 80016b4:	46a2      	mov	sl, r4
 80016b6:	e7d2      	b.n	800165e <_vfiprintf_r+0xe2>
 80016b8:	9b03      	ldr	r3, [sp, #12]
 80016ba:	1d19      	adds	r1, r3, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	9103      	str	r1, [sp, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bfbb      	ittet	lt
 80016c4:	425b      	neglt	r3, r3
 80016c6:	f042 0202 	orrlt.w	r2, r2, #2
 80016ca:	9307      	strge	r3, [sp, #28]
 80016cc:	9307      	strlt	r3, [sp, #28]
 80016ce:	bfb8      	it	lt
 80016d0:	9204      	strlt	r2, [sp, #16]
 80016d2:	7823      	ldrb	r3, [r4, #0]
 80016d4:	2b2e      	cmp	r3, #46	; 0x2e
 80016d6:	d10c      	bne.n	80016f2 <_vfiprintf_r+0x176>
 80016d8:	7863      	ldrb	r3, [r4, #1]
 80016da:	2b2a      	cmp	r3, #42	; 0x2a
 80016dc:	d135      	bne.n	800174a <_vfiprintf_r+0x1ce>
 80016de:	9b03      	ldr	r3, [sp, #12]
 80016e0:	1d1a      	adds	r2, r3, #4
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	9203      	str	r2, [sp, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bfb8      	it	lt
 80016ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80016ee:	3402      	adds	r4, #2
 80016f0:	9305      	str	r3, [sp, #20]
 80016f2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80017cc <_vfiprintf_r+0x250>
 80016f6:	7821      	ldrb	r1, [r4, #0]
 80016f8:	2203      	movs	r2, #3
 80016fa:	4650      	mov	r0, sl
 80016fc:	f7fe fd78 	bl	80001f0 <memchr>
 8001700:	b140      	cbz	r0, 8001714 <_vfiprintf_r+0x198>
 8001702:	2340      	movs	r3, #64	; 0x40
 8001704:	eba0 000a 	sub.w	r0, r0, sl
 8001708:	fa03 f000 	lsl.w	r0, r3, r0
 800170c:	9b04      	ldr	r3, [sp, #16]
 800170e:	4303      	orrs	r3, r0
 8001710:	3401      	adds	r4, #1
 8001712:	9304      	str	r3, [sp, #16]
 8001714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001718:	482d      	ldr	r0, [pc, #180]	; (80017d0 <_vfiprintf_r+0x254>)
 800171a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800171e:	2206      	movs	r2, #6
 8001720:	f7fe fd66 	bl	80001f0 <memchr>
 8001724:	2800      	cmp	r0, #0
 8001726:	d03f      	beq.n	80017a8 <_vfiprintf_r+0x22c>
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <_vfiprintf_r+0x258>)
 800172a:	bb1b      	cbnz	r3, 8001774 <_vfiprintf_r+0x1f8>
 800172c:	9b03      	ldr	r3, [sp, #12]
 800172e:	3307      	adds	r3, #7
 8001730:	f023 0307 	bic.w	r3, r3, #7
 8001734:	3308      	adds	r3, #8
 8001736:	9303      	str	r3, [sp, #12]
 8001738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800173a:	443b      	add	r3, r7
 800173c:	9309      	str	r3, [sp, #36]	; 0x24
 800173e:	e767      	b.n	8001610 <_vfiprintf_r+0x94>
 8001740:	fb0c 3202 	mla	r2, ip, r2, r3
 8001744:	460c      	mov	r4, r1
 8001746:	2001      	movs	r0, #1
 8001748:	e7a5      	b.n	8001696 <_vfiprintf_r+0x11a>
 800174a:	2300      	movs	r3, #0
 800174c:	3401      	adds	r4, #1
 800174e:	9305      	str	r3, [sp, #20]
 8001750:	4619      	mov	r1, r3
 8001752:	f04f 0c0a 	mov.w	ip, #10
 8001756:	4620      	mov	r0, r4
 8001758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800175c:	3a30      	subs	r2, #48	; 0x30
 800175e:	2a09      	cmp	r2, #9
 8001760:	d903      	bls.n	800176a <_vfiprintf_r+0x1ee>
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0c5      	beq.n	80016f2 <_vfiprintf_r+0x176>
 8001766:	9105      	str	r1, [sp, #20]
 8001768:	e7c3      	b.n	80016f2 <_vfiprintf_r+0x176>
 800176a:	fb0c 2101 	mla	r1, ip, r1, r2
 800176e:	4604      	mov	r4, r0
 8001770:	2301      	movs	r3, #1
 8001772:	e7f0      	b.n	8001756 <_vfiprintf_r+0x1da>
 8001774:	ab03      	add	r3, sp, #12
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	462a      	mov	r2, r5
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <_vfiprintf_r+0x25c>)
 800177c:	a904      	add	r1, sp, #16
 800177e:	4630      	mov	r0, r6
 8001780:	f3af 8000 	nop.w
 8001784:	4607      	mov	r7, r0
 8001786:	1c78      	adds	r0, r7, #1
 8001788:	d1d6      	bne.n	8001738 <_vfiprintf_r+0x1bc>
 800178a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800178c:	07d9      	lsls	r1, r3, #31
 800178e:	d405      	bmi.n	800179c <_vfiprintf_r+0x220>
 8001790:	89ab      	ldrh	r3, [r5, #12]
 8001792:	059a      	lsls	r2, r3, #22
 8001794:	d402      	bmi.n	800179c <_vfiprintf_r+0x220>
 8001796:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001798:	f7ff fd83 	bl	80012a2 <__retarget_lock_release_recursive>
 800179c:	89ab      	ldrh	r3, [r5, #12]
 800179e:	065b      	lsls	r3, r3, #25
 80017a0:	f53f af12 	bmi.w	80015c8 <_vfiprintf_r+0x4c>
 80017a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80017a6:	e711      	b.n	80015cc <_vfiprintf_r+0x50>
 80017a8:	ab03      	add	r3, sp, #12
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	462a      	mov	r2, r5
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <_vfiprintf_r+0x25c>)
 80017b0:	a904      	add	r1, sp, #16
 80017b2:	4630      	mov	r0, r6
 80017b4:	f000 f880 	bl	80018b8 <_printf_i>
 80017b8:	e7e4      	b.n	8001784 <_vfiprintf_r+0x208>
 80017ba:	bf00      	nop
 80017bc:	08001d94 	.word	0x08001d94
 80017c0:	08001db4 	.word	0x08001db4
 80017c4:	08001d74 	.word	0x08001d74
 80017c8:	08001dd4 	.word	0x08001dd4
 80017cc:	08001dda 	.word	0x08001dda
 80017d0:	08001dde 	.word	0x08001dde
 80017d4:	00000000 	.word	0x00000000
 80017d8:	08001557 	.word	0x08001557

080017dc <_printf_common>:
 80017dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017e0:	4616      	mov	r6, r2
 80017e2:	4699      	mov	r9, r3
 80017e4:	688a      	ldr	r2, [r1, #8]
 80017e6:	690b      	ldr	r3, [r1, #16]
 80017e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017ec:	4293      	cmp	r3, r2
 80017ee:	bfb8      	it	lt
 80017f0:	4613      	movlt	r3, r2
 80017f2:	6033      	str	r3, [r6, #0]
 80017f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80017f8:	4607      	mov	r7, r0
 80017fa:	460c      	mov	r4, r1
 80017fc:	b10a      	cbz	r2, 8001802 <_printf_common+0x26>
 80017fe:	3301      	adds	r3, #1
 8001800:	6033      	str	r3, [r6, #0]
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	0699      	lsls	r1, r3, #26
 8001806:	bf42      	ittt	mi
 8001808:	6833      	ldrmi	r3, [r6, #0]
 800180a:	3302      	addmi	r3, #2
 800180c:	6033      	strmi	r3, [r6, #0]
 800180e:	6825      	ldr	r5, [r4, #0]
 8001810:	f015 0506 	ands.w	r5, r5, #6
 8001814:	d106      	bne.n	8001824 <_printf_common+0x48>
 8001816:	f104 0a19 	add.w	sl, r4, #25
 800181a:	68e3      	ldr	r3, [r4, #12]
 800181c:	6832      	ldr	r2, [r6, #0]
 800181e:	1a9b      	subs	r3, r3, r2
 8001820:	42ab      	cmp	r3, r5
 8001822:	dc26      	bgt.n	8001872 <_printf_common+0x96>
 8001824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001828:	1e13      	subs	r3, r2, #0
 800182a:	6822      	ldr	r2, [r4, #0]
 800182c:	bf18      	it	ne
 800182e:	2301      	movne	r3, #1
 8001830:	0692      	lsls	r2, r2, #26
 8001832:	d42b      	bmi.n	800188c <_printf_common+0xb0>
 8001834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001838:	4649      	mov	r1, r9
 800183a:	4638      	mov	r0, r7
 800183c:	47c0      	blx	r8
 800183e:	3001      	adds	r0, #1
 8001840:	d01e      	beq.n	8001880 <_printf_common+0xa4>
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	68e5      	ldr	r5, [r4, #12]
 8001846:	6832      	ldr	r2, [r6, #0]
 8001848:	f003 0306 	and.w	r3, r3, #6
 800184c:	2b04      	cmp	r3, #4
 800184e:	bf08      	it	eq
 8001850:	1aad      	subeq	r5, r5, r2
 8001852:	68a3      	ldr	r3, [r4, #8]
 8001854:	6922      	ldr	r2, [r4, #16]
 8001856:	bf0c      	ite	eq
 8001858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800185c:	2500      	movne	r5, #0
 800185e:	4293      	cmp	r3, r2
 8001860:	bfc4      	itt	gt
 8001862:	1a9b      	subgt	r3, r3, r2
 8001864:	18ed      	addgt	r5, r5, r3
 8001866:	2600      	movs	r6, #0
 8001868:	341a      	adds	r4, #26
 800186a:	42b5      	cmp	r5, r6
 800186c:	d11a      	bne.n	80018a4 <_printf_common+0xc8>
 800186e:	2000      	movs	r0, #0
 8001870:	e008      	b.n	8001884 <_printf_common+0xa8>
 8001872:	2301      	movs	r3, #1
 8001874:	4652      	mov	r2, sl
 8001876:	4649      	mov	r1, r9
 8001878:	4638      	mov	r0, r7
 800187a:	47c0      	blx	r8
 800187c:	3001      	adds	r0, #1
 800187e:	d103      	bne.n	8001888 <_printf_common+0xac>
 8001880:	f04f 30ff 	mov.w	r0, #4294967295
 8001884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001888:	3501      	adds	r5, #1
 800188a:	e7c6      	b.n	800181a <_printf_common+0x3e>
 800188c:	18e1      	adds	r1, r4, r3
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	2030      	movs	r0, #48	; 0x30
 8001892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001896:	4422      	add	r2, r4
 8001898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800189c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80018a0:	3302      	adds	r3, #2
 80018a2:	e7c7      	b.n	8001834 <_printf_common+0x58>
 80018a4:	2301      	movs	r3, #1
 80018a6:	4622      	mov	r2, r4
 80018a8:	4649      	mov	r1, r9
 80018aa:	4638      	mov	r0, r7
 80018ac:	47c0      	blx	r8
 80018ae:	3001      	adds	r0, #1
 80018b0:	d0e6      	beq.n	8001880 <_printf_common+0xa4>
 80018b2:	3601      	adds	r6, #1
 80018b4:	e7d9      	b.n	800186a <_printf_common+0x8e>
	...

080018b8 <_printf_i>:
 80018b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80018bc:	7e0f      	ldrb	r7, [r1, #24]
 80018be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80018c0:	2f78      	cmp	r7, #120	; 0x78
 80018c2:	4691      	mov	r9, r2
 80018c4:	4680      	mov	r8, r0
 80018c6:	460c      	mov	r4, r1
 80018c8:	469a      	mov	sl, r3
 80018ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80018ce:	d807      	bhi.n	80018e0 <_printf_i+0x28>
 80018d0:	2f62      	cmp	r7, #98	; 0x62
 80018d2:	d80a      	bhi.n	80018ea <_printf_i+0x32>
 80018d4:	2f00      	cmp	r7, #0
 80018d6:	f000 80d8 	beq.w	8001a8a <_printf_i+0x1d2>
 80018da:	2f58      	cmp	r7, #88	; 0x58
 80018dc:	f000 80a3 	beq.w	8001a26 <_printf_i+0x16e>
 80018e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80018e8:	e03a      	b.n	8001960 <_printf_i+0xa8>
 80018ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80018ee:	2b15      	cmp	r3, #21
 80018f0:	d8f6      	bhi.n	80018e0 <_printf_i+0x28>
 80018f2:	a101      	add	r1, pc, #4	; (adr r1, 80018f8 <_printf_i+0x40>)
 80018f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80018f8:	08001951 	.word	0x08001951
 80018fc:	08001965 	.word	0x08001965
 8001900:	080018e1 	.word	0x080018e1
 8001904:	080018e1 	.word	0x080018e1
 8001908:	080018e1 	.word	0x080018e1
 800190c:	080018e1 	.word	0x080018e1
 8001910:	08001965 	.word	0x08001965
 8001914:	080018e1 	.word	0x080018e1
 8001918:	080018e1 	.word	0x080018e1
 800191c:	080018e1 	.word	0x080018e1
 8001920:	080018e1 	.word	0x080018e1
 8001924:	08001a71 	.word	0x08001a71
 8001928:	08001995 	.word	0x08001995
 800192c:	08001a53 	.word	0x08001a53
 8001930:	080018e1 	.word	0x080018e1
 8001934:	080018e1 	.word	0x080018e1
 8001938:	08001a93 	.word	0x08001a93
 800193c:	080018e1 	.word	0x080018e1
 8001940:	08001995 	.word	0x08001995
 8001944:	080018e1 	.word	0x080018e1
 8001948:	080018e1 	.word	0x080018e1
 800194c:	08001a5b 	.word	0x08001a5b
 8001950:	682b      	ldr	r3, [r5, #0]
 8001952:	1d1a      	adds	r2, r3, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	602a      	str	r2, [r5, #0]
 8001958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800195c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001960:	2301      	movs	r3, #1
 8001962:	e0a3      	b.n	8001aac <_printf_i+0x1f4>
 8001964:	6820      	ldr	r0, [r4, #0]
 8001966:	6829      	ldr	r1, [r5, #0]
 8001968:	0606      	lsls	r6, r0, #24
 800196a:	f101 0304 	add.w	r3, r1, #4
 800196e:	d50a      	bpl.n	8001986 <_printf_i+0xce>
 8001970:	680e      	ldr	r6, [r1, #0]
 8001972:	602b      	str	r3, [r5, #0]
 8001974:	2e00      	cmp	r6, #0
 8001976:	da03      	bge.n	8001980 <_printf_i+0xc8>
 8001978:	232d      	movs	r3, #45	; 0x2d
 800197a:	4276      	negs	r6, r6
 800197c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001980:	485e      	ldr	r0, [pc, #376]	; (8001afc <_printf_i+0x244>)
 8001982:	230a      	movs	r3, #10
 8001984:	e019      	b.n	80019ba <_printf_i+0x102>
 8001986:	680e      	ldr	r6, [r1, #0]
 8001988:	602b      	str	r3, [r5, #0]
 800198a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800198e:	bf18      	it	ne
 8001990:	b236      	sxthne	r6, r6
 8001992:	e7ef      	b.n	8001974 <_printf_i+0xbc>
 8001994:	682b      	ldr	r3, [r5, #0]
 8001996:	6820      	ldr	r0, [r4, #0]
 8001998:	1d19      	adds	r1, r3, #4
 800199a:	6029      	str	r1, [r5, #0]
 800199c:	0601      	lsls	r1, r0, #24
 800199e:	d501      	bpl.n	80019a4 <_printf_i+0xec>
 80019a0:	681e      	ldr	r6, [r3, #0]
 80019a2:	e002      	b.n	80019aa <_printf_i+0xf2>
 80019a4:	0646      	lsls	r6, r0, #25
 80019a6:	d5fb      	bpl.n	80019a0 <_printf_i+0xe8>
 80019a8:	881e      	ldrh	r6, [r3, #0]
 80019aa:	4854      	ldr	r0, [pc, #336]	; (8001afc <_printf_i+0x244>)
 80019ac:	2f6f      	cmp	r7, #111	; 0x6f
 80019ae:	bf0c      	ite	eq
 80019b0:	2308      	moveq	r3, #8
 80019b2:	230a      	movne	r3, #10
 80019b4:	2100      	movs	r1, #0
 80019b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80019ba:	6865      	ldr	r5, [r4, #4]
 80019bc:	60a5      	str	r5, [r4, #8]
 80019be:	2d00      	cmp	r5, #0
 80019c0:	bfa2      	ittt	ge
 80019c2:	6821      	ldrge	r1, [r4, #0]
 80019c4:	f021 0104 	bicge.w	r1, r1, #4
 80019c8:	6021      	strge	r1, [r4, #0]
 80019ca:	b90e      	cbnz	r6, 80019d0 <_printf_i+0x118>
 80019cc:	2d00      	cmp	r5, #0
 80019ce:	d04d      	beq.n	8001a6c <_printf_i+0x1b4>
 80019d0:	4615      	mov	r5, r2
 80019d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80019d6:	fb03 6711 	mls	r7, r3, r1, r6
 80019da:	5dc7      	ldrb	r7, [r0, r7]
 80019dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80019e0:	4637      	mov	r7, r6
 80019e2:	42bb      	cmp	r3, r7
 80019e4:	460e      	mov	r6, r1
 80019e6:	d9f4      	bls.n	80019d2 <_printf_i+0x11a>
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d10b      	bne.n	8001a04 <_printf_i+0x14c>
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	07de      	lsls	r6, r3, #31
 80019f0:	d508      	bpl.n	8001a04 <_printf_i+0x14c>
 80019f2:	6923      	ldr	r3, [r4, #16]
 80019f4:	6861      	ldr	r1, [r4, #4]
 80019f6:	4299      	cmp	r1, r3
 80019f8:	bfde      	ittt	le
 80019fa:	2330      	movle	r3, #48	; 0x30
 80019fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001a04:	1b52      	subs	r2, r2, r5
 8001a06:	6122      	str	r2, [r4, #16]
 8001a08:	f8cd a000 	str.w	sl, [sp]
 8001a0c:	464b      	mov	r3, r9
 8001a0e:	aa03      	add	r2, sp, #12
 8001a10:	4621      	mov	r1, r4
 8001a12:	4640      	mov	r0, r8
 8001a14:	f7ff fee2 	bl	80017dc <_printf_common>
 8001a18:	3001      	adds	r0, #1
 8001a1a:	d14c      	bne.n	8001ab6 <_printf_i+0x1fe>
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	b004      	add	sp, #16
 8001a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a26:	4835      	ldr	r0, [pc, #212]	; (8001afc <_printf_i+0x244>)
 8001a28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001a2c:	6829      	ldr	r1, [r5, #0]
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	f851 6b04 	ldr.w	r6, [r1], #4
 8001a34:	6029      	str	r1, [r5, #0]
 8001a36:	061d      	lsls	r5, r3, #24
 8001a38:	d514      	bpl.n	8001a64 <_printf_i+0x1ac>
 8001a3a:	07df      	lsls	r7, r3, #31
 8001a3c:	bf44      	itt	mi
 8001a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8001a42:	6023      	strmi	r3, [r4, #0]
 8001a44:	b91e      	cbnz	r6, 8001a4e <_printf_i+0x196>
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	f023 0320 	bic.w	r3, r3, #32
 8001a4c:	6023      	str	r3, [r4, #0]
 8001a4e:	2310      	movs	r3, #16
 8001a50:	e7b0      	b.n	80019b4 <_printf_i+0xfc>
 8001a52:	6823      	ldr	r3, [r4, #0]
 8001a54:	f043 0320 	orr.w	r3, r3, #32
 8001a58:	6023      	str	r3, [r4, #0]
 8001a5a:	2378      	movs	r3, #120	; 0x78
 8001a5c:	4828      	ldr	r0, [pc, #160]	; (8001b00 <_printf_i+0x248>)
 8001a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a62:	e7e3      	b.n	8001a2c <_printf_i+0x174>
 8001a64:	0659      	lsls	r1, r3, #25
 8001a66:	bf48      	it	mi
 8001a68:	b2b6      	uxthmi	r6, r6
 8001a6a:	e7e6      	b.n	8001a3a <_printf_i+0x182>
 8001a6c:	4615      	mov	r5, r2
 8001a6e:	e7bb      	b.n	80019e8 <_printf_i+0x130>
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	6826      	ldr	r6, [r4, #0]
 8001a74:	6961      	ldr	r1, [r4, #20]
 8001a76:	1d18      	adds	r0, r3, #4
 8001a78:	6028      	str	r0, [r5, #0]
 8001a7a:	0635      	lsls	r5, r6, #24
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	d501      	bpl.n	8001a84 <_printf_i+0x1cc>
 8001a80:	6019      	str	r1, [r3, #0]
 8001a82:	e002      	b.n	8001a8a <_printf_i+0x1d2>
 8001a84:	0670      	lsls	r0, r6, #25
 8001a86:	d5fb      	bpl.n	8001a80 <_printf_i+0x1c8>
 8001a88:	8019      	strh	r1, [r3, #0]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	6123      	str	r3, [r4, #16]
 8001a8e:	4615      	mov	r5, r2
 8001a90:	e7ba      	b.n	8001a08 <_printf_i+0x150>
 8001a92:	682b      	ldr	r3, [r5, #0]
 8001a94:	1d1a      	adds	r2, r3, #4
 8001a96:	602a      	str	r2, [r5, #0]
 8001a98:	681d      	ldr	r5, [r3, #0]
 8001a9a:	6862      	ldr	r2, [r4, #4]
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4628      	mov	r0, r5
 8001aa0:	f7fe fba6 	bl	80001f0 <memchr>
 8001aa4:	b108      	cbz	r0, 8001aaa <_printf_i+0x1f2>
 8001aa6:	1b40      	subs	r0, r0, r5
 8001aa8:	6060      	str	r0, [r4, #4]
 8001aaa:	6863      	ldr	r3, [r4, #4]
 8001aac:	6123      	str	r3, [r4, #16]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ab4:	e7a8      	b.n	8001a08 <_printf_i+0x150>
 8001ab6:	6923      	ldr	r3, [r4, #16]
 8001ab8:	462a      	mov	r2, r5
 8001aba:	4649      	mov	r1, r9
 8001abc:	4640      	mov	r0, r8
 8001abe:	47d0      	blx	sl
 8001ac0:	3001      	adds	r0, #1
 8001ac2:	d0ab      	beq.n	8001a1c <_printf_i+0x164>
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	079b      	lsls	r3, r3, #30
 8001ac8:	d413      	bmi.n	8001af2 <_printf_i+0x23a>
 8001aca:	68e0      	ldr	r0, [r4, #12]
 8001acc:	9b03      	ldr	r3, [sp, #12]
 8001ace:	4298      	cmp	r0, r3
 8001ad0:	bfb8      	it	lt
 8001ad2:	4618      	movlt	r0, r3
 8001ad4:	e7a4      	b.n	8001a20 <_printf_i+0x168>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	4632      	mov	r2, r6
 8001ada:	4649      	mov	r1, r9
 8001adc:	4640      	mov	r0, r8
 8001ade:	47d0      	blx	sl
 8001ae0:	3001      	adds	r0, #1
 8001ae2:	d09b      	beq.n	8001a1c <_printf_i+0x164>
 8001ae4:	3501      	adds	r5, #1
 8001ae6:	68e3      	ldr	r3, [r4, #12]
 8001ae8:	9903      	ldr	r1, [sp, #12]
 8001aea:	1a5b      	subs	r3, r3, r1
 8001aec:	42ab      	cmp	r3, r5
 8001aee:	dcf2      	bgt.n	8001ad6 <_printf_i+0x21e>
 8001af0:	e7eb      	b.n	8001aca <_printf_i+0x212>
 8001af2:	2500      	movs	r5, #0
 8001af4:	f104 0619 	add.w	r6, r4, #25
 8001af8:	e7f5      	b.n	8001ae6 <_printf_i+0x22e>
 8001afa:	bf00      	nop
 8001afc:	08001de5 	.word	0x08001de5
 8001b00:	08001df6 	.word	0x08001df6

08001b04 <_sbrk_r>:
 8001b04:	b538      	push	{r3, r4, r5, lr}
 8001b06:	4d06      	ldr	r5, [pc, #24]	; (8001b20 <_sbrk_r+0x1c>)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	602b      	str	r3, [r5, #0]
 8001b10:	f7ff f832 	bl	8000b78 <_sbrk>
 8001b14:	1c43      	adds	r3, r0, #1
 8001b16:	d102      	bne.n	8001b1e <_sbrk_r+0x1a>
 8001b18:	682b      	ldr	r3, [r5, #0]
 8001b1a:	b103      	cbz	r3, 8001b1e <_sbrk_r+0x1a>
 8001b1c:	6023      	str	r3, [r4, #0]
 8001b1e:	bd38      	pop	{r3, r4, r5, pc}
 8001b20:	20000144 	.word	0x20000144

08001b24 <__sread>:
 8001b24:	b510      	push	{r4, lr}
 8001b26:	460c      	mov	r4, r1
 8001b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b2c:	f000 f8a0 	bl	8001c70 <_read_r>
 8001b30:	2800      	cmp	r0, #0
 8001b32:	bfab      	itete	ge
 8001b34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001b36:	89a3      	ldrhlt	r3, [r4, #12]
 8001b38:	181b      	addge	r3, r3, r0
 8001b3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001b3e:	bfac      	ite	ge
 8001b40:	6563      	strge	r3, [r4, #84]	; 0x54
 8001b42:	81a3      	strhlt	r3, [r4, #12]
 8001b44:	bd10      	pop	{r4, pc}

08001b46 <__swrite>:
 8001b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b4a:	461f      	mov	r7, r3
 8001b4c:	898b      	ldrh	r3, [r1, #12]
 8001b4e:	05db      	lsls	r3, r3, #23
 8001b50:	4605      	mov	r5, r0
 8001b52:	460c      	mov	r4, r1
 8001b54:	4616      	mov	r6, r2
 8001b56:	d505      	bpl.n	8001b64 <__swrite+0x1e>
 8001b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f000 f868 	bl	8001c34 <_lseek_r>
 8001b64:	89a3      	ldrh	r3, [r4, #12]
 8001b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b6e:	81a3      	strh	r3, [r4, #12]
 8001b70:	4632      	mov	r2, r6
 8001b72:	463b      	mov	r3, r7
 8001b74:	4628      	mov	r0, r5
 8001b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b7a:	f000 b817 	b.w	8001bac <_write_r>

08001b7e <__sseek>:
 8001b7e:	b510      	push	{r4, lr}
 8001b80:	460c      	mov	r4, r1
 8001b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b86:	f000 f855 	bl	8001c34 <_lseek_r>
 8001b8a:	1c43      	adds	r3, r0, #1
 8001b8c:	89a3      	ldrh	r3, [r4, #12]
 8001b8e:	bf15      	itete	ne
 8001b90:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b9a:	81a3      	strheq	r3, [r4, #12]
 8001b9c:	bf18      	it	ne
 8001b9e:	81a3      	strhne	r3, [r4, #12]
 8001ba0:	bd10      	pop	{r4, pc}

08001ba2 <__sclose>:
 8001ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ba6:	f000 b813 	b.w	8001bd0 <_close_r>
	...

08001bac <_write_r>:
 8001bac:	b538      	push	{r3, r4, r5, lr}
 8001bae:	4d07      	ldr	r5, [pc, #28]	; (8001bcc <_write_r+0x20>)
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	602a      	str	r2, [r5, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f7fe ff8f 	bl	8000ade <_write>
 8001bc0:	1c43      	adds	r3, r0, #1
 8001bc2:	d102      	bne.n	8001bca <_write_r+0x1e>
 8001bc4:	682b      	ldr	r3, [r5, #0]
 8001bc6:	b103      	cbz	r3, 8001bca <_write_r+0x1e>
 8001bc8:	6023      	str	r3, [r4, #0]
 8001bca:	bd38      	pop	{r3, r4, r5, pc}
 8001bcc:	20000144 	.word	0x20000144

08001bd0 <_close_r>:
 8001bd0:	b538      	push	{r3, r4, r5, lr}
 8001bd2:	4d06      	ldr	r5, [pc, #24]	; (8001bec <_close_r+0x1c>)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4604      	mov	r4, r0
 8001bd8:	4608      	mov	r0, r1
 8001bda:	602b      	str	r3, [r5, #0]
 8001bdc:	f7fe ff9b 	bl	8000b16 <_close>
 8001be0:	1c43      	adds	r3, r0, #1
 8001be2:	d102      	bne.n	8001bea <_close_r+0x1a>
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	b103      	cbz	r3, 8001bea <_close_r+0x1a>
 8001be8:	6023      	str	r3, [r4, #0]
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	20000144 	.word	0x20000144

08001bf0 <_fstat_r>:
 8001bf0:	b538      	push	{r3, r4, r5, lr}
 8001bf2:	4d07      	ldr	r5, [pc, #28]	; (8001c10 <_fstat_r+0x20>)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	602b      	str	r3, [r5, #0]
 8001bfe:	f7fe ff95 	bl	8000b2c <_fstat>
 8001c02:	1c43      	adds	r3, r0, #1
 8001c04:	d102      	bne.n	8001c0c <_fstat_r+0x1c>
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	b103      	cbz	r3, 8001c0c <_fstat_r+0x1c>
 8001c0a:	6023      	str	r3, [r4, #0]
 8001c0c:	bd38      	pop	{r3, r4, r5, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000144 	.word	0x20000144

08001c14 <_isatty_r>:
 8001c14:	b538      	push	{r3, r4, r5, lr}
 8001c16:	4d06      	ldr	r5, [pc, #24]	; (8001c30 <_isatty_r+0x1c>)
 8001c18:	2300      	movs	r3, #0
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	602b      	str	r3, [r5, #0]
 8001c20:	f7fe ff93 	bl	8000b4a <_isatty>
 8001c24:	1c43      	adds	r3, r0, #1
 8001c26:	d102      	bne.n	8001c2e <_isatty_r+0x1a>
 8001c28:	682b      	ldr	r3, [r5, #0]
 8001c2a:	b103      	cbz	r3, 8001c2e <_isatty_r+0x1a>
 8001c2c:	6023      	str	r3, [r4, #0]
 8001c2e:	bd38      	pop	{r3, r4, r5, pc}
 8001c30:	20000144 	.word	0x20000144

08001c34 <_lseek_r>:
 8001c34:	b538      	push	{r3, r4, r5, lr}
 8001c36:	4d07      	ldr	r5, [pc, #28]	; (8001c54 <_lseek_r+0x20>)
 8001c38:	4604      	mov	r4, r0
 8001c3a:	4608      	mov	r0, r1
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	602a      	str	r2, [r5, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f7fe ff8b 	bl	8000b5e <_lseek>
 8001c48:	1c43      	adds	r3, r0, #1
 8001c4a:	d102      	bne.n	8001c52 <_lseek_r+0x1e>
 8001c4c:	682b      	ldr	r3, [r5, #0]
 8001c4e:	b103      	cbz	r3, 8001c52 <_lseek_r+0x1e>
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	bd38      	pop	{r3, r4, r5, pc}
 8001c54:	20000144 	.word	0x20000144

08001c58 <__malloc_lock>:
 8001c58:	4801      	ldr	r0, [pc, #4]	; (8001c60 <__malloc_lock+0x8>)
 8001c5a:	f7ff bb21 	b.w	80012a0 <__retarget_lock_acquire_recursive>
 8001c5e:	bf00      	nop
 8001c60:	20000138 	.word	0x20000138

08001c64 <__malloc_unlock>:
 8001c64:	4801      	ldr	r0, [pc, #4]	; (8001c6c <__malloc_unlock+0x8>)
 8001c66:	f7ff bb1c 	b.w	80012a2 <__retarget_lock_release_recursive>
 8001c6a:	bf00      	nop
 8001c6c:	20000138 	.word	0x20000138

08001c70 <_read_r>:
 8001c70:	b538      	push	{r3, r4, r5, lr}
 8001c72:	4d07      	ldr	r5, [pc, #28]	; (8001c90 <_read_r+0x20>)
 8001c74:	4604      	mov	r4, r0
 8001c76:	4608      	mov	r0, r1
 8001c78:	4611      	mov	r1, r2
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	602a      	str	r2, [r5, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f7fe ff10 	bl	8000aa4 <_read>
 8001c84:	1c43      	adds	r3, r0, #1
 8001c86:	d102      	bne.n	8001c8e <_read_r+0x1e>
 8001c88:	682b      	ldr	r3, [r5, #0]
 8001c8a:	b103      	cbz	r3, 8001c8e <_read_r+0x1e>
 8001c8c:	6023      	str	r3, [r4, #0]
 8001c8e:	bd38      	pop	{r3, r4, r5, pc}
 8001c90:	20000144 	.word	0x20000144

08001c94 <_init>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	bf00      	nop
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr

08001ca0 <_fini>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	bf00      	nop
 8001ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ca6:	bc08      	pop	{r3}
 8001ca8:	469e      	mov	lr, r3
 8001caa:	4770      	bx	lr
